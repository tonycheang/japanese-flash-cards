{"version":3,"sources":["Deck.js","ErrorBoundary.js","FlashCardApp.js","TransferTagsModal.js","EditableTagGroup.js","ManageDeckPage.js","Site.js","serviceWorker.js","index.js"],"names":["FlashCard","front","back","prompt","tags","key","Object","classCallCheck","this","createClass","value","check","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","input","slice","length","substring","toLowerCase","includes","Deck","appendCard","bind","deleteCard","editCard","getListOfCards","getListOfTags","getCardFromKey","cards","nextKey","active","uniqueCycleOfCards","tagCounts","activeTags","keys","reverse","values","card","_this","forEach","tag","hasOwnProperty","_this2","_cleanEmptyTags","_this3","_this4","usedInActive","_i","_Object$entries","entries","_ref3","_ref2","slicedToArray","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","isTagged","push","_buildUniqueCycle","i","nextPicked","Math","floor","random","_ref4","pop","get","json","newDeck","parsed","JSON","parse","newCardsObj","_ref5","_ref6","obj","Number","map","buildDefaultDeck","zipAndAppendToDeck","characters","phonetics","deck","char","defaultDeck","rebuildActive","ErrorBoundary","props","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","react_default","a","createElement","es_card","result","status","title","children","React","Component","inputFieldStyle","backgroundColor","fontSize","textAlign","FlashCardApp","handleInput","assertThisInitialized","reportCorrectness","showAnswer","resetInputAfterTyping","resetInput","resetInputAfterReveal","defaultBackgroundColor","typed","textColor","border","firstTimeTyping","justRevealed","window","addEventListener","removeEventListener","event","answering","curText","test","typingTimer","clearTimeout","setTimeout","currentCard","answer","answerStartsWith","hasAnswer","delay","nextCard","changeCard","empty","description","image","Empty","PRESENTED_IMAGE_SIMPLE","displayButton","defaultText","es_button","type","size","onClick","style","margin","src_ErrorBoundary","align","className","color","width","autoFocus","ghost","placeholder","onChange","TransferTagsModal","searchFilter","entry","handleChange","nextTargetKeys","direction","moveKeys","rightColumnKeys","handleSelectChange","sourceSelectedKeys","targetSelectedKeys","selectedKeys","concat","toConsumableArray","handleClose","shared","_","intersection","startingRightColumnKeys","keysToTags","tagStatuses","tagsToKeys","localStorage","setItem","stringify","message","success","closeModal","savedSettings","getItem","listOfTags","curKey","keyedTags","filter","_ref","_this$state","es_modal","visible","onCancel","onOk","display","justifyContent","alignContent","transfer","listStyle","height","dataSource","titles","targetKeys","onSelectChange","render","item","es_tag","filterOption","showSearch","EditableTagGroup","inputVisible","inputValue","removedTag","setTags","showInput","focus","handleInputChange","e","target","handleInputConfirm","indexOf","saveInputRef","tagDisplay","index","isLongTag","tagElem","closable","onClose","tooltip","ref","onBlur","onPressEnter","background","borderStyle","icon","Search","Input","EditableContext","createContext","EditableCell","renderCell","cellToRender","getFieldDecorator","_this$props","editing","dataIndex","record","inputType","restProps","objectWithoutProperties","es_form","Item","initialValue","Consumer","EditableTable","_React$Component2","shouldComponentUpdate","nextProps","nextState","_this2$state","searchInput","filters","filtersChanged","searchChanged","noLongerCreatingNewCard","creatingNewCard","deckChanged","newData","filterData","data","reportDealtWithChange","flashcard","isNewCard","handleTableChange","pagination","sorter","extra","sortedInfo","currentPage","current","selectedRowKeys","onSelectAll","selected","selectedRows","changeRows","destroy","selectAllMode","Error","deleteSelectedRows","deckOps","deleteCards","makeNewRow","newCard","rowTags","editingKey","isEditing","edit","cancel","save","form","validateFields","setColumns","renderHighlighter","text","main_default","highlightStyle","padding","searchWords","autoEscape","textToHighlight","toString","tagsColumnIndex","columns","editable","b","localeCompare","sort","textValA","textValB","EditableTagGroup_EditableTagGroup","divider","popconfirm","onConfirm","disabled","refresh","inherits","components","body","cell","rowSelection","hideDefaultSelections","selections","onSelect","col","_objectSpread","sortOrder","columnKey","order","onCell","Provider","table","deleteOrResetButton","deleteText","okType","okText","resetDeck","marginRight","bordered","EditableFormTable","Form","create","name","ManageDeckPage","listOfCards","_this5","refreshListOfCards","func","apply","arguments","Content","Layout","Site","selectMenuItem","startingActive","basic hiragana","savedDeckJSON","buildFromJSON","menuKeys","freeze","review","manage","stats","login","getNextCard","menuOpen","prevSelected","manageDeckChanged","modal","navBar","menu","mode","id","float","src_TransferTagsModal","activeMain","src_ManageDeckPage","marginTop","src_FlashCardApp_0","layout","reportAndSaveChanges","toSaveDeck","Site_objectSpread","Boolean","location","hostname","match","ReactDOM","src_Site_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.14d69974.chunk.js","sourcesContent":["export class FlashCard {\n    // Can expand to approximate matching later if desired\n    constructor(front, back, prompt, tags, key) {\n        this.front = front;\n        this.back = back;\n        this.prompt = prompt || \"\";\n        this.tags = tags || [];\n        this.key = key;\n    }\n\n    isTagged(check) {\n        for (let tag of this.tags) {\n            if (tag === check)\n                return true;\n        }\n        return false;\n    }\n\n    hasAnswer(input) {\n        return input === this.back;\n    }\n\n    answerStartsWith(input) {\n        return input === this.back.slice(0, input.length);\n    }\n\n    includes(substring) {\n        return this.front.toLowerCase().includes(substring.toLowerCase()) ||\n            this.back.toLowerCase().includes(substring.toLowerCase()) ||\n            this.prompt.toLowerCase().includes(substring.toLowerCase());\n    }\n}\n\nexport class Deck {\n    constructor() {\n        this.appendCard = this.appendCard.bind(this);\n        this.deleteCard = this.deleteCard.bind(this);\n        this.editCard = this.editCard.bind(this);\n        this.getListOfCards = this.getListOfCards.bind(this);\n        this.getListOfTags = this.getListOfTags.bind(this);\n        this.getCardFromKey = this.getCardFromKey.bind(this);\n\n        this.cards = {};\n        this.nextKey = 0;\n        this.active = [];\n        this.uniqueCycleOfCards = [];\n        this.tagCounts = {};\n        this.activeTags = [];\n    }\n\n    get deckOps() {\n        return {\n            getListOfTags: this.getListOfTags,\n            getCardFromKey: this.getCardFromKey,\n            getListOfCards: this.getListOfCards,\n            appendCard: this.appendCard,\n            editCard: this.editCard,\n            deleteCard: this.deleteCard\n        }\n    }\n\n    getListOfTags() {\n        return Object.keys(this.tagCounts).reverse();\n    }\n\n    getListOfCards() {\n        // Getter would evaluate when passed as a prop, so we use a regular \n        // Reverse to show new cards on top\n        return Object.values(this.cards).reverse();\n    }\n\n    getListOfActiveCards() {\n        return this.active.slice();\n    }\n\n    getCardFromKey(key) {\n        return this.cards[key];\n    }\n\n    appendCard(card) {\n        // Next key always increases, despite deletions. Ensures newly added cards to end by default.\n        card.key = this.nextKey;\n        this.nextKey++;\n        this.cards[card.key] = card;\n        // Keep count of all tags\n        card.tags.forEach((tag) => { this.tagCounts.hasOwnProperty(tag) ? this.tagCounts[tag] += 1 : this.tagCounts[tag] = 1 });\n    }\n\n    deleteCard(key) {\n        this.cards[key].tags.forEach((tag) => { this.tagCounts[tag] -= 1 });\n        this._cleanEmptyTags(key);\n        delete this.cards[key];\n        // Rebuild Active is responsibility of Site to avoid rebuilding active every operation\n    }\n\n    editCard(key, values) {\n        this.cards[key].tags.forEach((tag) => { this.tagCounts[tag] -= 1 });\n        values.tags.forEach((tag) => { this.tagCounts.hasOwnProperty(tag) ? this.tagCounts[tag] += 1 : this.tagCounts[tag] = 1 });\n        this._cleanEmptyTags(key);\n        \n        this.cards[key] = new FlashCard(values.front, values.back, values.prompt, values.tags, key);\n    }\n\n    _cleanEmptyTags(key) {\n        this.cards[key].tags.forEach((tag) => {\n            if (this.tagCounts[tag] === 0)\n                delete this.tagCounts[tag];\n        });\n    }\n\n    rebuildActive(activeTags) {\n        // Reset active cards, tags, and usedInActive flags\n        this.activeTags = activeTags || this.activeTags || [];\n        this.active = [];\n        const usedInActive = {};\n\n        // Add all cards with selected tags\n        for (let [key, card] of Object.entries(this.cards)) {\n            for (let tag of this.activeTags) {\n                // Avoid appending duplicate cards\n                if (card.isTagged(tag) && !usedInActive[key]) {\n                    this.active.push(card);\n                    usedInActive[key] = true;\n                }\n            }\n        }\n        this._buildUniqueCycle();\n    }\n\n    _buildUniqueCycle() {\n        // Shallow copy OK since tags do not matter.\n        this.uniqueCycleOfCards = this.active.slice();\n        // Fisher-Yate's or Durstenfeld shuffle\n        for (let i = this.active.length - 1; i > 0; i--) {\n            let nextPicked = Math.floor(Math.random()*(i+1));\n            // Swap into already-chosen region.\n            [this.uniqueCycleOfCards[nextPicked], this.uniqueCycleOfCards[i]] = \n                [this.uniqueCycleOfCards[i], this.uniqueCycleOfCards[nextPicked]];\n        }\n    }\n\n    getNextCard() {\n        if (this.active.length === 0) {\n            return void 0;\n        }\n        \n        if (this.uniqueCycleOfCards.length <= 0) {\n            this._buildUniqueCycle();\n        }\n\n        // Can add SRS system here with heap later\n        return this.uniqueCycleOfCards.pop();\n    }\n\n    static buildFromJSON(json) {\n\n        const newDeck = new Deck();\n        const parsed = JSON.parse(json);\n\n        // Copy values from JSON to the empty deck.\n        Object.keys(parsed).forEach((key) => { newDeck[key] = parsed[key] });\n\n        // Ensures objects get converted to FlashCard objects.\n        if (newDeck.cards) {\n            const newCardsObj = {};\n            Object.entries(newDeck.cards).forEach(([key, obj]) => {\n                const { front, back, prompt, tags } = obj;\n                newCardsObj[Number(key)] = new FlashCard(front, back, prompt, tags, Number(key));\n            });\n            newDeck.cards = newCardsObj;\n        }\n\n        if (newDeck.uniqueCycleOfCards) {\n            newDeck.uniqueCycleOfCards = newDeck.uniqueCycleOfCards.map((obj, i) => {\n                const { front, back, prompt, tags, key } = obj;\n                return new FlashCard(front, back, prompt, tags, Number(key));\n            });\n        }\n\n        if (newDeck.active) {\n            newDeck.active = newDeck.active.map((obj, i) => {\n                const { front, back, prompt, tags, key } = obj;\n                return new FlashCard(front, back, prompt, tags, Number(key));\n            });\n        }\n\n        return newDeck;\n    }\n}\n\nexport function buildDefaultDeck() {\n    function zipAndAppendToDeck(characters, phonetics, tags, deck) {\n        let zipped = characters.map((char, i) => new FlashCard(char, phonetics[i], \"phonetic\", tags));\n        // Reverse for regular order display in table.\n        zipped.reverse().forEach((card) => deck.appendCard(card));\n    }\n\n    let defaultDeck = new Deck();\n\n    const hiraganaSeiOnPhonetic = ['a', 'i', 'u', 'e', 'o',\n        'ka', 'ki', 'ku', 'ke', 'ko',\n        'sa', 'shi', 'su', 'se', 'so',\n        'ta', 'chi', 'tsu', 'te', 'to',\n        'na', 'ni', 'nu', 'ne', 'no',\n        'ha', 'hi', 'fu', 'he', 'ho',\n        'ma', 'mi', 'mu', 'me', 'mo',\n        'ya', 'yu', 'yo',\n        'ra', 'ri', 'ru', 're', 'ro',\n        'wa', 'wo', 'n'\n    ];\n    const hiraganaSeiOn = ['あ', 'い', 'う', 'え', 'お',\n        'か', 'き', 'く', 'け', 'こ',\n        'さ', 'し', 'す', 'せ', 'そ',\n        'た', 'ち', 'つ', 'て', 'と',\n        'な', 'に', 'ぬ', 'ね', 'の',\n        'は', 'ひ', 'ふ', 'へ', 'ほ',\n        'ま', 'み', 'む', 'め', 'も',\n        'や', 'ゆ', 'よ',\n        'ら', 'り', 'る', 'れ', 'ろ',\n        'わ', 'を', 'ん'\n    ];\n\n    const hiraganaDakuOnPhonetic = [\"ga\", \"gi\", \"gu\", \"ge\", \"go\",\n        \"za\", \"ji\", \"zu\", \"ze\", \"zo\",\n        \"da\", \"ji\", \"zu\", \"de\", \"do\",\n        \"ba\", \"bi\", \"bu\", \"be\", \"bo\",\n        \"pa\", \"pi\", \"pu\", \"pe\", \"po\",\n    ];\n    const hiraganaDakuOn = [\"が\", \"ぎ\", \"ぐ\", \"げ\", \"ご\",\n        \"ざ\", \"じ\", \"ず\", \"ぜ\", \"ぞ\",\n        \"だ\", \"ぢ\", \"づ\", \"で\", \"ど\",\n        \"ば\", \"び\", \"ぶ\", \"べ\", \"ぼ\",\n        \"ぱ\", \"ぴ\", \"ぷ\", \"ぺ\", \"ぽ\",\n    ];\n\n    const hiraganaYoOnPhoenetic = [\"kya\", \"kyu\", \"kyo\",\n        \"sha\", \"shu\", \"sho\",\n        \"cha\", \"chu\", \"cho\",\n        \"nya\", \"nyu\", \"nyo\",\n        \"hya\", \"hyu\", \"hyo\",\n        \"mya\", \"myu\", \"myo\",\n        \"rya\", \"ryu\", \"ryo\",\n        \"gya\", \"gyu\", \"gyo\",\n        \"ja\", \"ju\", \"jo\",\n        \"bya\", \"byu\", \"byo\",\n        \"pya\", \"pyu\", \"pyo\",\n\n    ];\n    const hiraganaYoOn = [\"きゃ\", \"きゅ\", \"きょ\",\n        \"しゃ\", \"しゅ\", \"しょ\",\n        \"ちゃ\", \"ちゅ\", \"ちょ\",\n        \"にゃ\", \"にゅ\", \"にょ\",\n        \"ひゃ\", \"ひゅ\", \"ひょ\",\n        \"みゃ\", \"みゅ\", \"みょ\",\n        \"りゃ\", \"りゅ\", \"りょ\",\n        \"ぎゃ\", \"ぎゅ\", \"ぎょ\",\n        \"じゃ\", \"じゅ\", \"じょ\",\n        \"びゃ\", \"びゅ\", \"びょ\",\n        \"ぴゃ\", \"ぴゅ\", \"ぴょ\"\n    ];\n\n    const katakanaSeiOnPhonetic = [\"a\", \"i\", \"u\", \"e\", \"o\",\n        \"ka\", \"ki\", \"ku\", \"ke\", \"ko\",\n        \"sa\", \"shi\", \"su\", \"se\", \"so\",\n        \"ta\", \"chi\", \"tsu\", \"te\", \"to\",\n        \"na\", \"ni\", \"nu\", \"ne\", \"no\",\n        \"ha\", \"hi\", \"fu\", \"he\", \"ho\",\n        \"ma\", \"mi\", \"mu\", \"me\", \"mo\",\n        \"ya\", \"yu\", \"yo\",\n        \"ra\", \"ri\", \"ru\", \"re\", \"ro\",\n        \"wa\", \"wo\", \"n\",\n    ];\n    const katakanaSeiOn = [\"ア\", \"イ\", \"ウ\", \"エ\", \"オ\",\n        \"カ\", \"キ\", \"ク\", \"ケ\", \"コ\",\n        \"サ\", \"シ\", \"ス\", \"セ\", \"ソ\",\n        \"タ\", \"チ\", \"ツ\", \"テ\", \"ト\",\n        \"ナ\", \"ニ\", \"ヌ\", \"ネ\", \"ノ\",\n        \"ハ\", \"ヒ\", \"フ\", \"ヘ\", \"ホ\",\n        \"マ\", \"ミ\", \"ム\", \"メ\", \"モ\",\n        \"ヤ\", \"ユ\", \"ヨ\",\n        \"ラ\", \"リ\", \"ル\", \"レ\", \"ロ\",\n        \"ワ\", \"ヲ\", \"ン\"\n    ];\n\n    const katakanaDakuOnPhonetic = [\"ga\", \"gi\", \"gu\", \"ge\", \"go\",\n        \"za\", \"ji\", \"zu\", \"ze\", \"zo\",\n        \"da\", \"ji\", \"zu\", \"de\", \"do\",\n        \"ba\", \"bi\", \"bu\", \"be\", \"bo\",\n        \"pa\", \"pi\", \"pu\", \"pe\", \"po\"\n    ];\n    const katakanaDakuOn = [\"ガ\", \"ギ\", \"グ\", \"ゲ\", \"ゴ\",\n        \"ザ\", \"ジ\", \"ズ\", \"ゼ\", \"ゾ\",\n        \"ダ\", \"ヂ\", \"ヅ\", \"デ\", \"ド\",\n        \"バ\", \"ビ\", \"ブ\", \"ベ\", \"ボ\",\n        \"パ\", \"ピ\", \"プ\", \"ペ\", \"ポ\"\n    ];\n\n    const katakanaYoOnPhonetic = [\"kya\", \"kyu\", \"kyo\",\n        \"sha\", \"shu\", \"sho\",\n        \"cha\", \"chu\", \"cho\",\n        \"nya\", \"nyu\", \"nyo\",\n        \"hya\", \"hyu\", \"hyo\",\n        \"mya\", \"myu\", \"myo\",\n        \"rya\", \"ryu\", \"ryo\",\n        \"gya\", \"gyu\", \"gyo\",\n        \"ja\", \"ju\", \"jo\",\n        \"bya\", \"byu\", \"byo\",\n        \"pya\", \"pyu\", \"pyo\",\n    ];\n    const katakanaYoOn = [\"キャ\", \"キュ\", \"キョ\",\n        \"シャ\", \"シュ\", \"ショ\",\n        \"チャ\", \"チュ\", \"チョ\",\n        \"ニャ\", \"ニュ\", \"ニョ\",\n        \"ヒャ\", \"ヒュ\", \"ヒョ\",\n        \"ミャ\", \"ミュ\", \"ミョ\",\n        \"リャ\", \"リュ\", \"リョ\",\n        \"ギャ\", \"ギュ\", \"ギョ\",\n        \"ジャ\", \"ジュ\", \"ジョ\",\n        \"ビャ\", \"ビュ\", \"ビョ\",\n        \"ピャ\", \"ピュ\", \"ピョ\"\n    ];\n\n    const katakanaForeignPhonetic = [\"fa\", \"fi\", \"fe\", \"fo\", \"fyu\",\n        \"wi\", \"we\", \"wo\", \"va\", \"vi\", \"ve\", \"vo\",\n        \"tsa\", \"tsi\", \"tse\", \"tso\",\n        \"che\", \"she\", \"je\",\n        \"ti\", \"di\", \"du\", \"tu\"\n    ];\n    const katakanaForeign = [\"ファ\", \"フィ\", \"フェ\", \"フォ\", \"フュ\",\n        \"ウィ\", \"ウェ\", \"ウォ\", \"ヴァ\", \"ヴィ\", \"ヴェ\", \"ヴォ\",\n        \"ツァ\", \"ツィ\", \"ツェ\", \"ツォ\", \"チェ\", \"シェ\", \"ジェ\",\n        \"ティ\", \"ディ\", \"デュ\", \"トゥ\"\n    ];\n\n    zipAndAppendToDeck(katakanaForeign, katakanaForeignPhonetic, [\"foreign katakana\", \"foreign\", \"katakana\", \"kana\"], defaultDeck);\n    zipAndAppendToDeck(katakanaYoOn, katakanaYoOnPhonetic, [\"contracted katakana\", \"contracted\", \"katakana\", \"kana\"], defaultDeck);\n    zipAndAppendToDeck(katakanaDakuOn, katakanaDakuOnPhonetic, [\"voiced katakana\", \"voiced\", \"katakana\", \"kana\"], defaultDeck);\n    zipAndAppendToDeck(katakanaSeiOn, katakanaSeiOnPhonetic, [\"basic katakana\", \"basic\", \"katakana\", \"kana\"], defaultDeck);\n    zipAndAppendToDeck(hiraganaYoOn, hiraganaYoOnPhoenetic, [\"contracted hiragana\", \"contracted\", \"hiragana\", \"kana\"], defaultDeck);\n    zipAndAppendToDeck(hiraganaDakuOn, hiraganaDakuOnPhonetic, [\"voiced hiragana\", \"voiced\", \"hiragana\", \"kana\"], defaultDeck);\n    zipAndAppendToDeck(hiraganaSeiOn, hiraganaSeiOnPhonetic, [\"basic hiragana\", \"basic\", \"hiragana\", \"kana\"], defaultDeck);\n\n    defaultDeck.rebuildActive([\"basic hiragana\"]);\n    return defaultDeck;\n}","import React from 'react';\nimport { Result, Card } from 'antd';\n\nclass ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { hasError: false };\n    }\n  \n    componentDidCatch(error, info) {\n        this.setState({ hasError: true });\n    }\n  \n    render() {\n        if (this.state.hasError) {\n            return (\n                <Card>\n                    <Result status=\"warning\" title=\"Opps! Something went wrong. Please refresh.\"/>\n                </Card>\n            )\n        }\n        return this.props.children;\n    }\n  }\n\nexport default ErrorBoundary;","import React from 'react';\nimport { Button, Card, Input, Empty } from 'antd';\nimport ErrorBoundary from './ErrorBoundary';\nimport './FlashCardApp.css';\n\nconst inputFieldStyle = {\n  backgroundColor: \"transparent\",\n  fontSize: 20,\n  textAlign: \"center\"\n}\n\nclass FlashCardApp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInput = this.handleInput.bind(this);\n    this.reportCorrectness = this.reportCorrectness.bind(this);\n    this.showAnswer = this.showAnswer.bind(this);\n    this.resetInputAfterTyping = this.resetInput.bind(this, 500);\n    this.resetInputAfterReveal = this.resetInput.bind(this, 0, true);\n\n    this.defaultBackgroundColor = \"#FFFFFF\";\n\n    this.state = {\n      typed: \"\",\n      textColor: \"#000000\",\n      backgroundColor: this.defaultBackgroundColor,\n      border: \"1px solid\",\n      firstTimeTyping: true,\n      justRevealed: false\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"keydown\", this.handleInput);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keydown\", this.handleInput);\n  }\n\n  handleInput(event) {\n    if (!this.props.answering)\n      return;\n\n    if (this.state.firstTimeTyping)\n      this.setState({ firstTimeTyping: false });\n\n    if (event.key === \"Enter\") {\n      if (this.state.justRevealed)\n        this.resetInputAfterReveal();\n      else\n        this.showAnswer();\n    }\n\n    let curText = this.state.typed;\n    let isCharacter = /^.$/;\n    if (event.key === \"Backspace\") {\n      if (curText.length > 0) {\n        this.setState({ typed: curText.slice(0, curText.length - 1) })\n      }\n      // should test for other allowable keys here (sentences have punctuation)\n    } else if (isCharacter.test(event.key)) {\n      this.setState((state) => { return {typed: state.typed + event.key} });\n    } else {\n      // Do not extend timer for input or report correctness\n      return;\n    }\n\n    // Extend the timer to recognize input if it exists, otherwise make one\n    if (this.state.typingTimer)\n      clearTimeout(this.state.typingTimer);\n    this.setState({ typingTimer: setTimeout(this.reportCorrectness, 300) });\n  }\n\n  showAnswer(event) {\n    if (this.state.firstTimeTyping)\n      this.setState({ firstTimeTyping: false });\n\n    this.setState({ justRevealed: true, typed: this.props.currentCard.back })\n  }\n\n  reportCorrectness() {\n    /* Flashes red or green on the page depending on input correctness */\n    if (!this.props.answering)\n      return;\n\n    // Don't accept input if card got revealed\n    if (this.state.justRevealed || !this.props.currentCard.back)\n      return;\n\n    let currentCard = this.props.currentCard;\n    let answer = currentCard.back;\n    let typed = this.state.typed.toLowerCase();\n\n    // Don't report if the first few characters are correct\n    if (typed.length < answer.length) {\n      if (currentCard.answerStartsWith(typed))\n        return;\n    }\n\n    if (currentCard.hasAnswer(typed)) {\n      this.setState({ backgroundColor: \"#f6ffed\", border: \"1px solid #b7eb8f\" });\n      this.resetInputAfterTyping(true);\n    } else {\n      this.setState({ backgroundColor: \"#fff1f0\", border: \"1px solid #ffa39e\" });\n      this.resetInputAfterTyping(false);\n    }\n  }\n\n  resetInput(delay, nextCard) {\n    /* Used to create partial functions via method.bind() for callback */\n    if (nextCard) {\n      this.setState({ typed: \"\" });\n      this.props.changeCard();\n    }\n    setTimeout(() => this.setState({ backgroundColor: this.defaultBackgroundColor, border: \"1px solid\" }), delay);\n    this.setState({ typed: \"\", typingTimer: null, justRevealed: false });\n  }\n\n  render() {\n    let card = this.props.currentCard;\n    if (!card) {\n      card = {prompt: <Empty description=\"No active cards!\" image={Empty.PRESENTED_IMAGE_SIMPLE} />}\n    }\n\n    let defaultText = this.state.firstTimeTyping ? \"answer here\" : \"\";\n\n    let displayButton;\n    if (this.state.justRevealed)\n      displayButton = <Button type=\"default\" size=\"large\" onClick={this.resetInputAfterReveal}\n        style={{ backgroundColor: \"transparent\", margin: \"2%\" }}>continue</Button>;\n    else\n      displayButton = <Button type=\"default\" size=\"large\" onClick={this.showAnswer}\n        style={{ backgroundColor: \"transparent\", margin: \"2%\" }}>show</Button>\n\n    return (\n      <ErrorBoundary>\n        <div align=\"center\">\n          <Card className=\"Card\" style={{ backgroundColor: this.state.backgroundColor }}>\n            <div style={{ fontSize: 20, margin: \".5%\", color: \"#bfbfbf\" }}>\n              {card.prompt}\n            </div>\n            <div style={{ fontSize: 70, margin: \"2%\" }}>\n              {card.front}\n            </div>\n            <div align=\"center\" style={{ margin: \"2%\", width: \"80%\" }}>\n              <Input autoFocus ghost=\"true\"\n                placeholder={defaultText}\n                value={this.state.typed}\n                style={inputFieldStyle}\n                onChange={this.handleInput} />\n            </div>\n            <div>{displayButton}</div>\n          </Card>\n        </div>\n      </ErrorBoundary>\n    )\n  };\n}\n\nexport default FlashCardApp;\n","import React from 'react';\nimport { Transfer, Modal, Tag, message } from \"antd\";\nimport ErrorBoundary from './ErrorBoundary';\nimport _ from 'lodash';\n\nclass TransferTagsModal extends React.Component {\n    constructor(props) {\n        super(props);\n        const savedSettings = JSON.parse(localStorage.getItem(\"activeTags\")) || {};\n\n        this.tagsToKeys = {};\n        this.keysToTags = {};\n\n        // Ultimately draws tags from props. Settings just to populate active/inactive\n        this.props.listOfTags.forEach((tag, curKey) => {\n            this.tagsToKeys[tag] = curKey;\n            this.keysToTags[curKey] = tag;\n        });\n        \n        const keyedTags = this.props.listOfTags.map((tag) => { return {tag, key: this.tagsToKeys[tag]} });\n\n        const rightColumnKeys = Object\n                                .entries(this.tagsToKeys)\n                                .filter(([tag, _]) => { return savedSettings[tag] || false })\n                                .map(([_, key]) => { return key });\n\n        this.startingRightColumnKeys = rightColumnKeys;\n\n        this.state  = {\n            keyedTags,\n            rightColumnKeys,\n            selectedKeys: [],\n        };\n    }\n\n    searchFilter = (input, entry) => {\n        return entry.tag.toLowerCase().includes(input.toLowerCase());\n    }\n\n    handleChange = (nextTargetKeys, direction, moveKeys) => {\n        this.setState({ rightColumnKeys: nextTargetKeys });\n    }\n\n    handleSelectChange = (sourceSelectedKeys, targetSelectedKeys) => {\n        this.setState({ selectedKeys: [...sourceSelectedKeys, ...targetSelectedKeys] });\n    }\n\n    handleClose = () => {\n        const { rightColumnKeys } = this.state;\n\n        // Determine if anything changed\n        const shared = _.intersection(rightColumnKeys, this.startingRightColumnKeys);\n        if (shared.length !== rightColumnKeys.length || shared.length !== this.startingRightColumnKeys.length) {\n            \n            // Rebuild deck with active tags\n            let activeTags = rightColumnKeys.map((key) => { return this.keysToTags[key]});\n            this.props.rebuildActive(activeTags);\n\n            // Record active or not in { tag: active? }\n            const tagStatuses = {};\n            rightColumnKeys.forEach((key) => tagStatuses[this.keysToTags[key]] = true);\n            Object.keys(this.tagsToKeys).forEach((tag) => {\n                if (!tagStatuses.hasOwnProperty(tag)) {\n                    tagStatuses[tag] = false;\n                }\n            });\n\n            // Record the changes in local storage via overwrite\n            localStorage.setItem(\"activeTags\", JSON.stringify(tagStatuses));\n\n            this.props.changeCard();\n            message.success(\"Deck rebuilt!\");\n        }\n\n        this.props.closeModal();\n    }\n\n    render() {\n        const { rightColumnKeys, selectedKeys, keyedTags } = this.state;\n\n        return (\n            <ErrorBoundary>\n                <Modal title=\"Active Tags\"\n                    visible={this.props.visible}\n                    onCancel={this.props.closeModal}\n                    onOk={this.handleClose}>\n                    <div style={{ display: \"flex\", justifyContent: \"center\", alignContent: \"center\" }}>\n                        <Transfer listStyle={{ height: 450, width: 200 }}\n                            dataSource={keyedTags}\n                            titles={[\"Inactive\", \"Active\"]}\n                            targetKeys={rightColumnKeys}\n                            selectedKeys={selectedKeys}\n                            onChange={this.handleChange}\n                            onSelectChange={this.handleSelectChange}\n                            render={(item) => { return <Tag>{item.tag}</Tag> }}\n                            filterOption={this.searchFilter}\n                            showSearch>\n                        </Transfer>\n                    </div>\n                </Modal>\n            </ErrorBoundary>\n        );\n    }\n}\n\nexport default TransferTagsModal;","import React from \"react\"\nimport { Tag, Input, Tooltip, Icon } from 'antd';\n\nexport default class EditableTagGroup extends React.Component {\n  \n  // Component in addition to changing state,\n  // also calls callback to set tags in parent components/card\n  state = {\n    tags: this.props.tags,\n    inputVisible: false,\n    inputValue: '',\n  };\n\n  handleClose = removedTag => {\n    const tags = this.props.tags.filter(tag => tag !== removedTag);\n    this.setState({ tags });\n    this.props.setTags(tags);\n  };\n\n  showInput = () => {\n    this.setState({ inputVisible: true }, () => this.input.focus());\n  };\n\n  handleInputChange = e => {\n    this.setState({ inputValue: e.target.value });\n  };\n\n  handleInputConfirm = () => {\n    const { inputValue } = this.state;\n    let { tags } = this.state;\n    if (inputValue && tags.indexOf(inputValue) === -1) {\n      tags = [...tags, inputValue];\n    }\n\n    this.props.setTags(tags);\n\n    this.setState({\n      tags,\n      inputVisible: false,\n      inputValue: '',\n    });\n  };\n\n  saveInputRef = input => (this.input = input);\n\n  render() {\n    const { inputVisible, inputValue } = this.state;\n    const { tags } = this.state;\n    let tagDisplay;\n\n    if (tags) {\n        tagDisplay = tags.map((tag, index) => {\n          const isLongTag = tag.length > 20;\n          const tagElem = (\n            <Tag key={tag} closable onClose={() => this.handleClose(tag)}>\n              {isLongTag ? `${tag.slice(0, 20)}...` : tag}\n            </Tag>\n          );\n          return isLongTag ? (\n            <Tooltip title={tag} key={tag}>\n              {tagElem}\n            </Tooltip>\n          ) : (\n            tagElem\n          );\n        })\n    }\n\n    return (\n      <div>\n        {tagDisplay}\n        {/* Use AutoComplete */}\n        {inputVisible && (\n          <Input\n            ref={this.saveInputRef}\n            type=\"text\"\n            size=\"small\"\n            style={{ width: 78 }}\n            value={inputValue}\n            onChange={this.handleInputChange}\n            onBlur={this.handleInputConfirm}\n            onPressEnter={this.handleInputConfirm}\n          />\n        )}\n        {!inputVisible && (\n          <Tag onClick={this.showInput} style={{ background: '#fff', borderStyle: 'dashed' }}>\n            <Icon type=\"plus\" /> New Tag\n          </Tag>\n        )}\n      </div>\n    );\n  }\n}","import React from 'react';\nimport { Form, Input, message, Popconfirm, Table, Tag } from 'antd';\nimport { Card, Divider, Button, Icon } from 'antd';\nimport EditableTagGroup from \"./EditableTagGroup\";\nimport { FlashCard } from \"./Deck\";\nimport Highlighter from 'react-highlight-words';\nimport ErrorBoundary from './ErrorBoundary';\nimport _ from 'lodash';\n\nconst { Search } = Input;\n\nconst EditableContext = React.createContext();\n\nclass EditableCell extends React.Component {\n\n    renderCell = ({ getFieldDecorator }) => {\n        const { editing, dataIndex, title, inputType,\n            record, index, children, ...restProps } = this.props;\n\n        let cellToRender;\n\n        if (editing) {\n            cellToRender = <Form.Item style={{margin: 0}}>\n                                {getFieldDecorator(dataIndex, {initialValue: record[dataIndex]})(<Input/>)}\n                            </Form.Item>\n        } else {\n            cellToRender = children;\n        }\n\n        return (\n            <td {...restProps}>\n                {cellToRender}\n            </td>\n        );\n    }\n\n    render() {\n        return <EditableContext.Consumer>{this.renderCell}</EditableContext.Consumer>;\n    }\n}\n\nexport class EditableTable extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            searchInput: \"\",\n            editingKey: \"\",\n            selectedRowKeys: [],\n            currentPage: 1,\n            refresh: false,\n            rowTags: [],\n            sortedInfo: null,\n            data: this.props.dataSource,\n            filters: []\n        };\n\n        // Doesn't need to update state and rerender.\n        this.selectAllMode = \"page-data\";\n        this.setColumns();\n    }\n\n    /* ----- Lifecycle ----- */\n\n    shouldComponentUpdate = (nextProps, nextState) => {\n        const { searchInput, filters } = this.state;\n\n        const shared = _.intersection(filters, nextState.filters);\n        const filtersChanged = shared.length !== filters.length || shared.length !== nextState.filters.length;\n        const searchChanged = searchInput !== nextState.searchInput;\n        const noLongerCreatingNewCard = this.state.creatingNewCard === true && nextState.creatingNewCard === false;\n\n        // Don't update on filter change and search input change.\n        if (nextProps.deckChanged || searchChanged || filtersChanged || noLongerCreatingNewCard) {\n            // Filters from what parent component passes down.\n            let newData = this.filterData(nextProps, nextState);\n            // Rely on data change to update component.\n            this.setState({ data: newData });\n            this.props.reportDealtWithChange();\n            return false;\n        }\n        return true;\n    }\n\n    filterData = (nextProps, nextState) => {\n        // Props will always contain the full list of cards, so pull starting data from that.\n        let newData = nextProps.dataSource;\n\n        // Don't filter if empty inputs though.\n        if (nextState.searchInput !== \"\") {\n            newData = newData.filter((flashcard) => {\n                return flashcard.includes(nextState.searchInput) || flashcard.isNewCard;\n            });\n        }\n\n        if (nextState.filters.length !== 0) {\n            newData = newData.filter((flashcard) => {\n                for (let tag of nextState.filters) {\n                    if (flashcard.isTagged(tag) || flashcard.isNewCard)\n                        return true;\n                }\n                return false;\n            });\n        }\n\n        return newData;\n    }\n\n    /* ----- Callbacks for Table Component ----- */\n\n    handleTableChange = (pagination, filters, sorter, extra) => {\n        if (filters.tags) {\n            this.setState({ filters: filters.tags });\n        }\n        this.setState({ sortedInfo: sorter, currentPage: pagination.current });\n    }\n\n    onSelectChange = (selectedRowKeys) => {\n        this.setState({ selectedRowKeys });\n    }\n\n    onSelectAll = (selected, selectedRows, changeRows) => {\n        // Changes keys to pass onto table depending on selectAllMode and user action.\n        const { data } = this.state;\n        message.destroy();\n        if (selected) {\n            if (this.selectAllMode === \"all-data\") {\n                this.setState({ selectedRowKeys: data.map((card) => card.key) });\n                message.info(`Selected ${data.length} cards across pages.`);\n            } else if (this.selectAllMode === \"page-data\") {\n                this.setState({ selectedRowKeys: selectedRows.map((card)=> card.key) });\n                message.info(`Selected ${selectedRows.length} cards from this page.`);\n            } else {\n                throw Error(\"Assertion Error: invalid state for EdtiableTable selectAllMode\");\n            }\n        } else {\n            if (this.selectAllMode === \"all-data\") {\n                this.setState({ selectedRowKeys: [] });\n                message.info(\"Deselected all cards.\")\n            } else if (this.selectAllMode === \"page-data\") {\n                // deselect only the current page, even if selected all in a previous step\n                const selectedRowKeys = selectedRows.map((card)=> card.key);\n                this.setState({ selectedRowKeys });\n                if (selectedRowKeys.length > 0) {\n                    message.info(`Deselected page. ${selectedRowKeys.length} cards still selected.`)\n                } else {\n                    message.info(`Deselected all cards.`)\n                }\n            } else {\n                throw Error(\"Assertion Error: invalid state for EdtiableTable selectAllMode\");\n            }\n        }\n    }\n\n    /* ----- Row Operations ----- */\n\n    deleteSelectedRows = () => {\n        /* \n        Note: cannot remove tags with 0 cards from the list of filters,\n        because antd's Table internally keeps track of filters and won't remove\n        even if the passed columns prop changes.\n        */\n        const { selectedRowKeys } = this.state;\n        this.props.deckOps.deleteCards(selectedRowKeys);\n        message.destroy();\n        message.success(`Deleted ${selectedRowKeys.length} cards!`);\n        this.setState({ selectedRowKeys: [] });\n    }\n\n    makeNewRow = () => {\n        const newCard = new FlashCard(\"\", \"\");\n        // To help keep fields up top even if filters are on.\n        // Property goes away after editCard, since it create a new FlashCard.\n        newCard.isNewCard = true;\n        this.props.deckOps.appendCard(newCard);\n\n        this.setState({\n            // Resets sorting and pagination to avoid form not shown.\n            sortedInfo: null,\n            currentPage: 1,\n            // Empties selected keys to avoid selected cards deep in pagination\n            selectedRowKeys: [],\n            rowTags: [],\n            creatingNewCard: true,\n            editingKey: newCard.key\n            // Does not reset search or filters to go back to search + filters after addition of new card.\n        });\n    }\n\n    isEditing = (record) => {\n        return record.key === this.state.editingKey;\n    }\n\n    edit = (key) => {\n        // Pull existing tags for editing\n        const rowTags = this.props.deckOps.getCardFromKey(key).tags || [];\n        this.setState({ editingKey: key, rowTags });\n    }\n\n    cancel = () => {\n        if (this.state.creatingNewCard) {\n            const { editingKey } = this.state;\n            this.setState({ creatingNewCard: false });\n            this.props.deckOps.deleteCard(editingKey);\n        }\n        this.setState({ editingKey: '' });\n    }\n\n    save = (form, key) => {\n        form.validateFields((err, values) => {\n            if (err) return;\n            message.destroy();\n\n            if (!values.front && !values.back) {\n                message.error(\"Cannot add empty card!\");\n                return;\n            }\n\n            if (!values.front) {\n                message.error(\"Card needs a front!\");\n                return;\n            }\n\n            if (!values.back) {\n                message.error(\"Card needs a back!\");\n                return;\n            }\n\n            values.tags = this.state.rowTags;\n            this.props.deckOps.editCard(key, values);\n\n            if (this.state.creatingNewCard)\n                message.success(\"Created card!\");\n            else\n                message.success(\"Edited card!\");\n\n            this.setState({ editingKey: '', creatingNewCard: false, rowTags: [] });\n        });\n    }\n\n    /* ----- Render Related ----- */\n\n    setColumns = () => {\n        const renderHighlighter = (text) => {\n            return <Highlighter \n                highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n                searchWords={[this.state.searchInput]}\n                autoEscape\n                textToHighlight={text.toString()}/>\n        }\n        this.tagsColumnIndex = 2;\n        this.columns = [\n            {\n                title: \"Front\",\n                dataIndex: \"front\",\n                key: \"front\",\n                width: \"10%\",\n                editable: true,\n                sorter: (a, b) => a.front.localeCompare(b.front),\n                render: renderHighlighter\n            },\n            {\n                title: \"Back\",\n                dataIndex: \"back\",\n                key: \"back\",\n                width: \"10%\",\n                editable: true,\n                sorter: (a, b) => a.back.localeCompare(b.back),\n                render: renderHighlighter\n            },\n            {\n                title: \"Prompt\",\n                dataIndex: \"prompt\",\n                key: \"prompt\",\n                width: \"10%\",\n                editable: true,\n                render: renderHighlighter\n            },\n            {\n                title: \"Tags\",\n                dataIndex: \"tags\",\n                key: \"tags\",\n                filters: this.props.deckOps\n                    .getListOfTags()\n                    .map((tag) => { return {text: tag, value: tag} })\n                    .sort((textValA, textValB) => textValA.text.localeCompare(textValB.text)),\n                render: (text, record, dataIndex) => {\n                    const editable = this.isEditing(record);\n\n                    if (editable) {\n                        return <EditableTagGroup tags={this.state.rowTags} \n                                    setTags={ (rowTags) => { this.setState({ rowTags }) } }/>\n                    } else {\n                        if (record.tags)\n                            return record.tags.map((tag, i) => <Tag key={i}>{tag}</Tag>);\n                        else\n                            return;\n                    }\n                }\n            },\n            {\n                title: \"Operations\",\n                dataIndex: \"operations\",\n                key: \"operations\",\n                width: \"10%\",\n                render: (text, record) => {\n                    const { editingKey } = this.state;\n                    const editable = this.isEditing(record);\n                    let operationLink;\n\n                    if (editable) {\n                        operationLink = (\n                            <span>\n                                <EditableContext.Consumer>\n                                    {\n                                        (form) => {\n                                            return <Button size=\"small\" type=\"link\"\n                                                    onClick={() => { this.save(form, record.key) }}>\n                                                    Save\n                                                </Button>\n                                        }\n                                    }\n                                </EditableContext.Consumer>\n                                <Divider type=\"vertical\" />\n                                <Popconfirm title=\"OK to cancel?\"\n                                    onConfirm={() => { this.cancel(record.key) }}>\n                                    <Button size=\"small\" type=\"link\">Cancel</Button>\n                                </Popconfirm>\n                            </span>\n                        )\n                    } else {\n                        operationLink = (\n                            <span>\n                                <Button disabled={editingKey !== ''} size=\"small\" type=\"link\"\n                                    onClick={() => { this.edit(record.key) }}>\n                                    Edit\n                                </Button>\n                            </span>\n                        )\n                    }\n\n                    return operationLink;\n                }\n            }\n        ];\n    }\n\n    render() {\n        const renderTableHeader = () => {\n            const handleSearchChange = (event) => {\n                const { value } = event.target;\n                this.setState({ searchInput: value });\n            };\n\n            const { selectedRowKeys } = this.state;\n            const { dataSource } = this.props;\n\n            // Reset to default deck button only appears with 0 cards\n            let deleteOrResetButton;\n            if (dataSource && dataSource.length > 0) {\n                const deleteText = `Delete ${selectedRowKeys.length} Selected?`;\n                deleteOrResetButton = (\n                    <Popconfirm title={deleteText} okType=\"primary\" okText=\"Delete\"\n                                onConfirm={this.deleteSelectedRows}\n                                disabled={selectedRowKeys.length === 0}>\n                            <Button \n                                ghost type=\"danger\" \n                                disabled={selectedRowKeys.length === 0}>\n                                <Icon type=\"minus\" />\n                                Delete\n                            </Button>\n                    </Popconfirm>\n                )\n            } else {\n                deleteOrResetButton = (\n                    <Button onClick={this.props.deckOps.resetDeck}>\n                        <Icon type=\"rollback\"/>\n                        Default\n                    </Button>\n                )\n            }\n\n            return (\n                <span style={{ display: \"inline-flex\", width: \"100%\", justifyContent: \"flex-end\" }}>\n                    <Search placeholder=\"Search\"\n                        style={{ marginRight: \"1.5%\" }}\n                        onChange={handleSearchChange} />\n                    <div style={{ marginRight: \"1.5%\" }}>\n                        {deleteOrResetButton}\n                    </div>\n                    <Button ghost type=\"primary\"\n                        onClick={this.makeNewRow} \n                        disabled={this.state.editingKey !== ''}>\n                        <Icon type=\"plus\" />\n                        New Card\n                    </Button>\n                </span>\n            );\n        }\n\n        let { sortedInfo, selectedRowKeys, data } = this.state;\n\n        const components = { body: { cell: EditableCell } };\n        sortedInfo = sortedInfo || {};\n        const rowSelection = { \n            selectedRowKeys, \n            onChange: this.onSelectChange,\n            onSelectAll: this.onSelectAll,\n            hideDefaultSelections: true,\n            selections: [\n                {\n                    key: 'all-data',\n                    text: 'Select-All Mode',\n                    onSelect: () => {\n                        message.destroy();\n                        message.info(\"Select All Mode Enabled\");\n                        this.selectAllMode = \"all-data\";\n                    }\n                },\n                {\n                    key: 'page-data',\n                    text: 'Select-Page Mode',\n                    onSelect: () => {\n                        message.destroy();\n                        message.info(\"Select Page Mode Enabled\");\n                        this.selectAllMode = \"page-data\";\n                    }\n                }\n            ]\n        };\n\n        const columns = this.columns.map((col) => {\n            if (!col.editable)\n                return col;\n\n            return {\n                ...col,\n                sortOrder: sortedInfo.columnKey === col.key && sortedInfo.order,\n                onCell: (record) => {\n                    return {\n                        record,\n                        dataIndex: col.dataIndex,\n                        title: col.title,\n                        editing: this.isEditing(record)\n                    }\n                }\n            }\n        });\n\n        return <EditableContext.Provider value={this.props.form}>\n            <Table components={components}\n                onChange={this.handleTableChange}\n                rowSelection={rowSelection}\n                dataSource={data}\n                columns={columns}\n                pagination={{ onChange: this.cancel, current: this.state.currentPage }} \n                title={renderTableHeader}\n                bordered />\n        </EditableContext.Provider>\n    }\n}\n\nexport const EditableFormTable = Form.create({ name: \"Editable Form Table\" })(EditableTable);\n\nclass ManageDeckPage extends React.Component {\n    // Data lives here to refresh table component upon change\n    state = {\n        listOfCards: this.props.listOfCards,\n        // deckChanged used to determine if EditableFormTable should re-filter.\n        // Done here to easily attach to deckOps, if not the most elegant solution.\n        // Also allows EditableFormTable to wait for ManageDeckTable to pass the new list of cards.\n        deckChanged: false\n    };\n\n    static getDerivedStateFromProps(props, state) {\n        return { listOfCards: props.listOfCards };\n    }\n\n    get deckOps() {\n        const refreshListOfCards = (func) => {\n            return (...args) => {\n                func(...args);\n                // Can't use getter through props (evaluates in parent) so must explicitly call this function.\n                this.setState({ listOfCards: this.props.deckOps.getListOfCards(), deckChanged: true });\n            }\n        }\n\n        const appendCard = refreshListOfCards(this.props.deckOps.appendCard);\n        const deleteCard = refreshListOfCards(this.props.deckOps.deleteCard);\n        const deleteCards = refreshListOfCards(this.props.deckOps.deleteCards);\n        const editCard = refreshListOfCards(this.props.deckOps.editCard);\n        const resetDeck = refreshListOfCards(this.props.deckOps.resetDeck);\n\n        return {\n            ...this.props.deckOps,\n            appendCard,\n            deleteCard,\n            deleteCards,\n            editCard,\n            resetDeck\n        }\n    }\n\n    reportDealtWithChange = () => {\n        // Flag in state to refresh child component.\n        this.setState({ deckChanged: false });\n    }\n\n    render() {\n        return (\n            <ErrorBoundary>\n                <Card style={{margin: \"1.5% 5% 2% 5%\"}}>\n                    <EditableFormTable dataSource={this.state.listOfCards} \n                        reportDealtWithChange={this.reportDealtWithChange}\n                        deckChanged={this.state.deckChanged}\n                        deckOps={this.deckOps}/>\n                </Card>\n            </ErrorBoundary>\n        )\n    }\n}\n\nexport default ManageDeckPage;","import React from 'react';\nimport { buildDefaultDeck, Deck } from './Deck';\nimport { Icon, Menu, Layout, message } from \"antd\";\nimport FlashCardApp from './FlashCardApp';\nimport TransferTagsModal from './TransferTagsModal';\nimport ManageDeckPage from './ManageDeckPage';\nimport ErrorBoundary from './ErrorBoundary';\nimport \"./Site.css\";\n\nconst { Content } = Layout;\n\nclass Site extends React.Component {\n    constructor(props) {\n        super(props);\n        this.selectMenuItem = this.selectMenuItem.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n        this.changeCard = this.changeCard.bind(this);\n\n        const startingActive = [];\n\n        // Load existing values if they're there.\n        const savedSettings = JSON.parse(localStorage.getItem(\"activeTags\"));\n\n        if (savedSettings) {\n            Object.entries(savedSettings).forEach(([tag, active]) => {\n                if (active)\n                    startingActive.push(tag);\n            });\n        } else {\n            // Otherwise, default to having basic hiragana\n            startingActive.push(\"basic hiragana\");\n            localStorage.setItem(\"activeTags\", JSON.stringify({ \"basic hiragana\": true }));\n            message.success(\"Loaded default settings!\");\n        }\n\n        const savedDeckJSON = localStorage.getItem(\"savedDeck\");\n        const deck = savedDeckJSON ? Deck.buildFromJSON(savedDeckJSON) : buildDefaultDeck();\n        // Since we do not serialize deck into savedDeck in TagsModal, we need to pull settings and rebuild.\n        if (savedDeckJSON) deck.rebuildActive(startingActive);\n\n        // Enum helps with iterating through testing\n        this.menuKeys = Object.freeze({\n            review: \"review\",\n            manage: \"manage\",\n            stats: \"stats\",\n            login: \"login\",\n            tags: \"tags\", \n        });\n\n        this.state = {\n            deck,\n            currentCard: deck.getNextCard(),\n            menuOpen: false,\n            prevSelected: this.menuKeys.review,\n            selected: this.menuKeys.review,\n            manageDeckChanged: false\n        };\n    }\n\n    closeModal() {\n        this.setState({ selected: this.state.prevSelected });\n    }\n\n    selectMenuItem(event) {\n        // Navigation away from ManageDeckPage should rebuild the deck to accomodate changes.\n        if (this.state.selected === this.menuKeys.manage && this.state.manageDeckChanged) {\n            this.state.deck.rebuildActive();\n            this.setState({ currentCard: this.state.deck.getNextCard(), manageDeckChanged: false });\n        }\n\n        this.setState({ selected: event.key, prevSelected: this.state.selected });\n    }\n\n    changeCard() {\n        this.setState({ currentCard: this.state.deck.getNextCard() });\n    }\n\n    get deckOps() {\n        const { deck } = this.state;\n        const reportAndSaveChanges = (func, toSaveDeck) => {\n            return (...args) => {\n                func(...args);\n                this.setState({ manageDeckChanged: true });\n                localStorage.setItem(\"savedDeck\", JSON.stringify(toSaveDeck));\n            }\n        }\n\n        const appendCard = reportAndSaveChanges(deck.appendCard, deck);\n        const editCard = reportAndSaveChanges(deck.editCard, deck);\n        const deleteCard = reportAndSaveChanges(deck.deleteCard, deck);\n        const deleteCards = reportAndSaveChanges((keys) => { \n            keys.forEach((key) => deck.deleteCard(key));\n        }, deck);\n        const resetDeck = () => {\n            // Not using HoF above since building a default deck rebuilds active anyway.\n            // Better for testing.\n            const defaultDeck = buildDefaultDeck();\n            this.setState({ deck: defaultDeck, currentCard: defaultDeck.getNextCard() });\n            message.destroy();\n            message.success(\"Reset to default deck.\");\n            localStorage.setItem(\"activeTags\", JSON.stringify({ \"basic hiragana\": true }));\n            localStorage.setItem(\"savedDeck\", JSON.stringify(defaultDeck));\n        };\n\n        return {\n            ...deck.deckOps,\n            appendCard,\n            editCard,\n            deleteCard,\n            deleteCards,\n            resetDeck\n        }\n    }\n\n    render() {\n        const menuKeys = this.menuKeys;\n        const navBar = <Menu mode=\"horizontal\" style={{ height: \"5%\" }}\n                            onClick={this.selectMenuItem}\n                            selectedKeys={[this.state.selected]}>\n                            <Menu.Item id={menuKeys.review} key={menuKeys.review}><Icon type=\"home\"></Icon>Review</Menu.Item>\n                            <Menu.Item id={menuKeys.manage} key={menuKeys.manage}><Icon type=\"edit\"></Icon>Manage Deck</Menu.Item>\n                            <Menu.Item id={menuKeys.stats} key={menuKeys.stats} disabled><Icon type=\"line-chart\"></Icon>Stats</Menu.Item>\n                            \n                            <Menu.Item id={menuKeys.login} key={menuKeys.login} style={ {float: \"right\"} } disabled>\n                                <Icon type=\"login\"></Icon>\n                                Log In\n                            </Menu.Item>\n                            <Menu.Item id={menuKeys.tags} key={menuKeys.tags} style={ {float: \"right\"} }>\n                                <Icon type=\"setting\"></Icon>\n                                Active Tags\n                            </Menu.Item>\n                        </Menu>\n\n        let modal;\n        switch (this.state.selected) {\n            case menuKeys.tags:\n                modal = <TransferTagsModal \n                            listOfTags={this.state.deck.getListOfTags()}\n                            closeModal={this.closeModal}\n                            rebuildActive={(activeTags) => { this.state.deck.rebuildActive(activeTags) }}\n                            changeCard={this.changeCard}\n                            visible={this.state.selected === menuKeys.tags}>\n                        </TransferTagsModal>\n                break;\n            case menuKeys.manage:\n                // Use this.activeMain so the modal persists over the active page.\n                this.activeMain = <ManageDeckPage visible={this.state.selected === menuKeys.manage}\n                                    listOfCards={ this.state.deck.getListOfCards() }\n                                    deckOps={this.deckOps}/>\n                break;\n            case menuKeys.review:\n                this.activeMain = <div>\n                                <div style={{ marginTop: \"1%\" }}>\n                                    <header> Customized Study Session </header>\n                                </div>\n                                <FlashCardApp currentCard={this.state.currentCard}\n                                    changeCard={this.changeCard}\n                                    answering={this.state.selected === menuKeys.review}>\n                                </FlashCardApp>\n                            </div>\n                break;\n            default:\n                break;\n        }\n\n        return (\n            <Layout>\n                {navBar}\n                    <ErrorBoundary>\n                    {modal}\n                    <Content>\n                    {this.activeMain}\n                    </Content>\n                </ErrorBoundary>\n            </Layout>\n        )\n    }\n}\n\nexport default Site;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Site from './Site';\nimport * as serviceWorker from './serviceWorker';\nimport ErrorBoundary from './ErrorBoundary'\n\nReactDOM.render(<ErrorBoundary><Site /></ErrorBoundary>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}