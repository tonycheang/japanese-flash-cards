{"version":3,"sources":["CardDisplay.js","UserInputDisplay.js","App.js","serviceWorker.js","index.js"],"names":["CardDisplay","react_default","a","createElement","style","fontSize","margin","this","props","data","React","Component","UserInputDisplay","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","inputFieldStyle","backgroundColor","border","color","textColor","textAlign","autoFocus","placeholder","defaultText","value","Card","front","back","FlashCardApp","handleInput","bind","assertThisInitialized","reportCorrectness","defaultColor","phonetic","cards","map","char","i","state","currentCard","Math","floor","length","random","showFront","typed","firstTimeTyping","window","addEventListener","removeEventListener","event","setState","curText","key","slice","test","typingTimer","clearTimeout","setTimeout","_this2","answer","toLowerCase","card","displayData","align","touchAction","src_CardDisplay","src_UserInputDisplay","Boolean","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7276b4b4.chunk.js","sourcesContent":["import React from 'react';\n\nclass CardDisplay extends React.Component {\n    render(){\n        return (\n            <div style={{fontSize: 70, margin: \"20px\"}}>\n                {this.props.data}\n            </div>\n        )\n    }\n}\n\nexport default CardDisplay;","import React from 'react';\n\nclass UserInputDisplay extends React.Component {\n    constructor(props){\n        super(props);\n        this.inputFieldStyle = {\n            backgroundColor: this.props.backgroundColor, \n            border: \"none\",\n            color: this.props.textColor, \n            margin: \"20px\", \n            fontSize: 20,\n            textAlign: \"center\"\n        }\n    }\n    render() {\n        return (\n            <input autoFocus placeholder={this.props.defaultText} value={this.props.data} style={this.inputFieldStyle}>\n            </input>\n        )\n    }\n}\n\nexport default UserInputDisplay;","import React from 'react';\nimport CardDisplay from './CardDisplay';\nimport UserInputDisplay from './UserInputDisplay';\n\nclass Card {\n  constructor(front, back) {\n    this.front = front;\n    this.back = back;\n  }\n}\n\nclass FlashCardApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleInput = this.handleInput.bind(this);\n    this.reportCorrectness = this.reportCorrectness.bind(this);\n    this.defaultColor = \"#888888\"\n    let phonetic = ['a', 'i', 'u', 'e', 'o',\n      'ka', 'ki', 'ku', 'ke', 'ko',\n      'sa', 'shi', 'su', 'se', 'so',\n      'ta', 'chi', 'tsu', 'te', 'to',\n      'na', 'ni', 'nu', 'ne', 'no',\n      'ha', 'hi', 'fu', 'he', 'ho',\n      'ma', 'mi', 'mu', 'me', 'mo',\n      'ya', 'yu', 'yo',\n      'ra', 'ri', 'ru', 're', 'ro',\n      'wa', 'wo', 'n'\n    ];\n    let hirgana = ['あ', 'い', 'う', 'え', 'お',\n      'か', 'き', 'く', 'け', 'こ',\n      'さ', 'し', 'す', 'せ', 'そ',\n      'た', 'ち', 'つ', 'て', 'と',\n      'な', 'に', 'ぬ', 'ね', 'の',\n      'は', 'ひ', 'ふ', 'へ', 'ほ',\n      'ま', 'み', 'む', 'め', 'も',\n      'や', 'ゆ', 'よ',\n      'ら', 'り', 'る', 'れ', 'ろ',\n      'わ', 'を', 'ん'\n    ];\n    this.cards = hirgana.map((char, i) => new Card(char, phonetic[i]));\n    this.state = {\n      currentCard: this.cards[Math.floor(this.cards.length * Math.random())],\n      showFront: true,\n      typed: \"\",\n      textColor: \"#000000\",\n      backgroundColor: this.defaultColor,\n      firstTimeTyping: true\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"keydown\", this.handleInput);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keydown\", this.handleInput);\n  }\n\n  handleInput(event) {\n    if (this.state.firstTimeTyping)\n      this.setState({firstTimeTyping: false});\n\n    let curText = this.state.typed;\n    let isLetter = /^\\w$/;\n    if (event.key === \"Backspace\") {\n      if (curText.length > 0) {\n        this.setState({ typed: curText.slice(0, curText.length - 1) })\n      }\n    } else if (isLetter.test(event.key)) {\n      this.setState((state) => state.typed += event.key)\n    }\n    if (this.state.typingTimer)\n      clearTimeout(this.state.typingTimer);\n    this.setState({ typingTimer: setTimeout(this.reportCorrectness, 300) });\n  }\n\n  reportCorrectness() {\n    let answer = this.state.currentCard.back;\n    let typed = this.state.typed.toLowerCase();\n\n    // Don't report if the first few characters are correct\n    if (typed.length < answer.length) {\n      if (typed === answer.slice(0, typed.length))\n        return\n    }\n\n    if (typed === this.state.currentCard.back) {\n      this.setState({ backgroundColor: \"#00BB00\" });\n      this.setState({\n        currentCard: this.cards[Math.floor(this.cards.length * Math.random())],\n        typed: \"\"\n      })\n    } else {\n      this.setState({ backgroundColor: \"#BB0000\" });\n    }\n    this.setState({typed: \"\"})\n    setTimeout(() => this.setState({ backgroundColor: this.defaultColor }), 500)\n    this.setState({ typingTimer: null });\n  }\n\n  render() {\n    let card = this.state.currentCard;\n    let displayData = this.state.showFront ? card.front : card.back;\n    let defaultText = this.state.firstTimeTyping ? \"type the phonetic translation\" : \"\";\n    return (\n      <div align=\"center\" style={{ backgroundColor: this.state.backgroundColor, margin: \"10px\", touchAction:\"none\" }}>\n        <header style={{fontSize: 20}}>\n          A Flash Card Mini-Game for Hiragana\n        </header>\n        <CardDisplay data={displayData}></CardDisplay>\n        <UserInputDisplay data={this.state.typed}\n          defaultText={defaultText} \n          textColor={this.state.textColor}\n          backgroundColor={this.state.backgroundColor}>\n          </UserInputDisplay>\n      </div>\n    )\n  };\n}\n\nexport default FlashCardApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport FlashCardApp from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<FlashCardApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}