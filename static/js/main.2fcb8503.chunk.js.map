{"version":3,"sources":["Deck.js","ErrorBoundary.js","FlashCardApp.js","TagsModal.js","EditableTagGroup.js","ManageDeckPage.js","Site.js","serviceWorker.js","index.js"],"names":["FlashCard","front","back","tags","key","Object","classCallCheck","this","createClass","value","check","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","input","slice","length","substring","toLowerCase","includes","Deck","appendCard","bind","deleteCard","editCard","getListOfCards","getCardFromKey","cards","nextKey","active","uniqueCycleOfCards","tagCounts","values","reverse","card","_this","forEach","tag","hasOwnProperty","_this2","cleanEmptyTags","_this3","_this4","activeTags","usedInActive","_i","_Object$entries","entries","_ref3","_ref2","slicedToArray","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","isTagged","push","buildUniqueCycle","i","nextPicked","Math","floor","random","_ref4","react_default","a","createElement","empty","description","image","Empty","PRESENTED_IMAGE_SIMPLE","pop","get","keys","json","newDeck","parsed","JSON","parse","_ref5","_ref6","obj","map","ErrorBoundary","props","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","es_card","result","status","title","children","React","Component","inputFieldStyle","backgroundColor","fontSize","textAlign","FlashCardApp","handleInput","assertThisInitialized","reportCorrectness","showAnswer","resetInputAfterTyping","resetInput","resetInputAfterReveal","defaultBackgroundColor","typed","textColor","border","firstTimeTyping","window","addEventListener","removeEventListener","event","answering","justRevealed","curText","test","typingTimer","clearTimeout","setTimeout","currentCard","answer","startsWith","hasAnswer","delay","nextCard","changeCard","displayButton","defaultText","es_button","type","size","onClick","style","margin","src_ErrorBoundary","align","className","width","autoFocus","ghost","placeholder","onChange","TagsModal","handleClose","tagsStartingStatuses","tagsStatuses","savedSettings","localStorage","getItem","listOfTags","defaultToggle","columns","dataIndex","render","_","record","es_switch","defaultChecked","checked","changed","_ref","startingStatus","filter","rebuildActive","setItem","stringify","message","success","closeModal","dataSource","es_modal","visible","onCancel","cancelButtonProps","disabled","onOk","table","EditableTagGroup","inputVisible","inputValue","removedTag","setTags","showInput","focus","handleInputChange","e","target","handleInputConfirm","indexOf","concat","toConsumableArray","saveInputRef","tagDisplay","_this$state","index","isLongTag","tagElem","es_tag","closable","onClose","tooltip","ref","onBlur","onPressEnter","background","borderStyle","icon","Search","Input","EditableContext","createContext","EditableCell","renderCell","cellToRender","getFieldDecorator","_this$props","editing","inputType","restProps","objectWithoutProperties","es_form","Item","initialValue","Consumer","EditableTable","makeNewRow","newCard","isNewCard","deckOps","sortedInfo","currentPage","rowTags","creatingNewCard","editingKey","handleTableChange","isEditing","edit","cancel","save","searchInput","refresh","renderHighlighter","text","main_default","highlightStyle","padding","searchWords","autoEscape","textToHighlight","toString","editable","sorter","b","localeCompare","filters","onFilter","EditableTagGroup_EditableTagGroup","form","divider","popconfirm","onConfirm","okType","okText","pagination","current","validateFields","warning","components","body","cell","col","objectSpread","sortOrder","columnKey","order","onCell","data","item","Provider","display","justifyContent","marginRight","bordered","EditableFormTable","Form","create","name","ManageDeckPage","listOfCards","_this5","_this6","_this6$props$deckOps","apply","arguments","_this6$props$deckOps2","_this6$props$deckOps3","Content","Layout","Site","selectMenuItem","startingActive","basic hiragana","savedDeckJSON","deck","buildFromJSON","zipAndAppendToDeck","characters","phonetics","char","defaultDeck","buildDefaultDeck","getNextCard","menuOpen","prevSelected","selected","manageDeckChanged","modal","navBar","menu","mode","height","selectedKeys","float","src_TagsModal","activeMain","src_ManageDeckPage","marginTop","src_FlashCardApp_0","layout","_this3$deck","_this3$deck2","_this3$deck3","Boolean","location","hostname","match","ReactDOM","src_Site_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2fcb8503.chunk.js","sourcesContent":["import React from 'react';\nimport { Empty } from 'antd';\nexport class FlashCard {\n    // Can expand to approximate matching later if desired\n    constructor(front, back, tags, key) {\n        this.front = front;\n        this.back = back;\n        this.tags = tags || [];\n        this.key = key;\n    }\n\n    isTagged(check) {\n        for (let tag of this.tags) {\n            if (tag === check)\n                return true;\n        }\n        return false;\n    }\n\n    hasAnswer(input) {\n        return input === this.back;\n    }\n\n    startsWith(input) {\n        return input === this.back.slice(0, input.length);\n    }\n\n    includes(substring) {\n        return this.front.toLowerCase().includes(substring) || this.back.toLowerCase().includes(substring);\n    }\n}\n\nexport class Deck {\n    constructor() {\n        this.appendCard = this.appendCard.bind(this);\n        this.deleteCard = this.deleteCard.bind(this);\n        this.editCard = this.editCard.bind(this);\n        this.getListOfCards = this.getListOfCards.bind(this);\n        this.getCardFromKey = this.getCardFromKey.bind(this);\n\n        this.cards = {};\n        this.nextKey = 0;\n        this.active = [];\n        this.uniqueCycleOfCards = [];\n        this.tagCounts = {};\n    }\n\n    get listOfTags() {\n        return Object.keys(this.tagCounts);\n    }\n\n    getListOfCards() {\n        // Getter would evaluate when passed as a prop, so we use a regular \n        // Reverse to show new cards on top\n        return Object.values(this.cards).reverse();\n    }\n\n    getCardFromKey(key) {\n        return this.cards[key];\n    }\n\n    appendCard(card) {\n        // Next key always increases, despite deletions. Ensures newly added cards to end by default.\n        card.key = this.nextKey;\n        this.nextKey++;\n        this.cards[card.key] = card;\n        // Keep count of all tags\n        card.tags.forEach((tag) => { this.tagCounts.hasOwnProperty(tag) ? this.tagCounts[tag] += 1 : this.tagCounts[tag] = 1 });\n    }\n\n    deleteCard(key) {\n        this.cards[key].tags.forEach((tag) => { this.tagCounts[tag] -= 1 });\n        this.cleanEmptyTags(key);\n        delete this.cards[key];\n    }\n\n    editCard(key, values) {\n        this.cards[key].tags.forEach((tag) => { this.tagCounts[tag] -= 1 });\n        values.tags.forEach((tag) => { this.tagCounts.hasOwnProperty(tag) ? this.tagCounts[tag] += 1 : this.tagCounts[tag] = 1 });\n        this.cleanEmptyTags(key);\n        \n        this.cards[key] = new FlashCard(values.front, values.back, values.tags, key);\n    }\n\n    cleanEmptyTags(key) {\n        this.cards[key].tags.forEach((tag) => {\n            if (this.tagCounts[tag] === 0)\n                delete this.tagCounts[tag];\n        });\n    }\n\n    rebuildActive(activeTags) {\n        // Reset active cards, tags, and usedInActive flags\n        this.activeTags = activeTags || this.activeTags || [];\n        this.active = [];\n        const usedInActive = {};\n\n        // Add all cards with selected tags\n        for (let [key, card] of Object.entries(this.cards)) {\n            for (let tag of this.activeTags) {\n                // Avoid appending duplicate cards\n                if (card.isTagged(tag) && !usedInActive[key]) {\n                    this.active.push(card);\n                    usedInActive[key] = true;\n                }\n            }\n        }\n        this.buildUniqueCycle();\n    }\n\n    buildUniqueCycle() {\n        // Shallow copy OK since tags do not matter.\n        this.uniqueCycleOfCards = this.active.slice();\n        // Fisher-Yate's or Durstenfeld shuffle\n        for (let i = this.active.length - 1; i > 0 ;i--) {\n            let nextPicked = Math.floor(Math.random()*(i+1));\n            // Swap into already-chosen region.\n            [this.uniqueCycleOfCards[nextPicked], this.uniqueCycleOfCards[i]] = \n                [this.uniqueCycleOfCards[i], this.uniqueCycleOfCards[nextPicked]];\n        }\n    }\n\n    getNextCard() {\n        if (this.active.length === 0) {\n            return new FlashCard(<Empty description=\"No active cards!\" image={Empty.PRESENTED_IMAGE_SIMPLE} />);\n        }\n        \n        if (this.uniqueCycleOfCards.length <= 0){\n            this.buildUniqueCycle();\n        }\n\n        // Can add SRS system here with heap later\n        return this.uniqueCycleOfCards.pop();\n    }\n\n    static buildFromJSON(json) {\n\n        const newDeck = new Deck();\n        const parsed = JSON.parse(json);\n\n        // Copy values from JSON to the empty deck.\n        Object.keys(parsed).forEach((key) => { newDeck[key] = parsed[key] });\n\n        // Ensures objects get converted to FlashCard objects.\n        if (newDeck.cards) {\n            Object.entries(newDeck.cards).forEach(([key, obj]) => {\n                const { front, back, tags } = obj;\n                newDeck.cards[key] = new FlashCard(front, back, tags, key);\n            });\n        }\n\n        if (newDeck.uniqueCycleOfCards) {\n            newDeck.uniqueCycleOfCards = newDeck.uniqueCycleOfCards.map((obj, i) => {\n                const { front, back, tags, key } = obj;\n                return new FlashCard(front, back, tags, key);\n            });\n        }\n\n        if (newDeck.active) {\n            newDeck.active = newDeck.active.map((obj, i) => {\n                const { front, back, tags, key } = obj;\n                return new FlashCard(front, back, tags, key);\n            });\n        }\n\n        return newDeck;\n    }\n}\n\nexport function buildDefaultDeck(activeTags) {\n    function zipAndAppendToDeck(characters, phonetics, tag, deck) {\n        let zipped = characters.map((char, i) => new FlashCard(char, phonetics[i], [tag]));\n        // Reverse for regular order display in table.\n        zipped.reverse().forEach((card) => deck.appendCard(card));\n    }\n\n    let defaultDeck = new Deck();\n\n    const hiraganaSeiOnPhonetic = ['a', 'i', 'u', 'e', 'o',\n        'ka', 'ki', 'ku', 'ke', 'ko',\n        'sa', 'shi', 'su', 'se', 'so',\n        'ta', 'chi', 'tsu', 'te', 'to',\n        'na', 'ni', 'nu', 'ne', 'no',\n        'ha', 'hi', 'fu', 'he', 'ho',\n        'ma', 'mi', 'mu', 'me', 'mo',\n        'ya', 'yu', 'yo',\n        'ra', 'ri', 'ru', 're', 'ro',\n        'wa', 'wo', 'n'\n    ];\n    const hiraganaSeiOn = ['あ', 'い', 'う', 'え', 'お',\n        'か', 'き', 'く', 'け', 'こ',\n        'さ', 'し', 'す', 'せ', 'そ',\n        'た', 'ち', 'つ', 'て', 'と',\n        'な', 'に', 'ぬ', 'ね', 'の',\n        'は', 'ひ', 'ふ', 'へ', 'ほ',\n        'ま', 'み', 'む', 'め', 'も',\n        'や', 'ゆ', 'よ',\n        'ら', 'り', 'る', 'れ', 'ろ',\n        'わ', 'を', 'ん'\n    ];\n\n    const hiraganaDakuOnPhonetic = [\"ga\", \"gi\", \"gu\", \"ge\", \"go\",\n        \"za\", \"ji\", \"zu\", \"ze\", \"zo\",\n        \"da\", \"ji\", \"zu\", \"de\", \"do\",\n        \"ba\", \"bi\", \"bu\", \"be\", \"bo\",\n        \"pa\", \"pi\", \"pu\", \"pe\", \"po\",\n    ];\n    const hiraganaDakuOn = [\"が\", \"ぎ\", \"ぐ\", \"げ\", \"ご\",\n        \"ざ\", \"じ\", \"ず\", \"ぜ\", \"ぞ\",\n        \"だ\", \"ぢ\", \"づ\", \"で\", \"ど\",\n        \"ば\", \"び\", \"ぶ\", \"べ\", \"ぼ\",\n        \"ぱ\", \"ぴ\", \"ぷ\", \"ぺ\", \"ぽ\",\n    ];\n\n    const hiraganaYoOnPhoenetic = [\"kya\", \"kyu\", \"kyo\",\n        \"sha\", \"shu\", \"sho\",\n        \"cha\", \"chu\", \"cho\",\n        \"nya\", \"nyu\", \"nyo\",\n        \"hya\", \"hyu\", \"hyo\",\n        \"mya\", \"myu\", \"myo\",\n        \"rya\", \"ryu\", \"ryo\",\n        \"gya\", \"gyu\", \"gyo\",\n        \"ja\", \"ju\", \"jo\",\n        \"bya\", \"byu\", \"byo\",\n        \"pya\", \"pyu\", \"pyo\",\n\n    ];\n    const hiraganaYoOn = [\"きゃ\", \"きゅ\", \"きょ\",\n        \"しゃ\", \"しゅ\", \"しょ\",\n        \"ちゃ\", \"ちゅ\", \"ちょ\",\n        \"にゃ\", \"にゅ\", \"にょ\",\n        \"ひゃ\", \"ひゅ\", \"ひょ\",\n        \"みゃ\", \"みゅ\", \"みょ\",\n        \"りゃ\", \"りゅ\", \"りょ\",\n        \"ぎゃ\", \"ぎゅ\", \"ぎょ\",\n        \"じゃ\", \"じゅ\", \"じょ\",\n        \"びゃ\", \"びゅ\", \"びょ\",\n        \"ぴゃ\", \"ぴゅ\", \"ぴょ\"\n    ];\n\n    const katakanaSeiOnPhonetic = [\"a\", \"i\", \"u\", \"e\", \"o\",\n        \"ka\", \"ki\", \"ku\", \"ke\", \"ko\",\n        \"sa\", \"shi\", \"su\", \"se\", \"so\",\n        \"ta\", \"chi\", \"tsu\", \"te\", \"to\",\n        \"na\", \"ni\", \"nu\", \"ne\", \"no\",\n        \"ha\", \"hi\", \"fu\", \"he\", \"ho\",\n        \"ma\", \"mi\", \"mu\", \"me\", \"mo\",\n        \"ya\", \"yu\", \"yo\",\n        \"ra\", \"ri\", \"ru\", \"re\", \"ro\",\n        \"wa\", \"wo\", \"n\",\n    ];\n    const katakanaSeiOn = [\"ア\", \"イ\", \"ウ\", \"エ\", \"オ\",\n        \"カ\", \"キ\", \"ク\", \"ケ\", \"コ\",\n        \"サ\", \"シ\", \"ス\", \"セ\", \"ソ\",\n        \"タ\", \"チ\", \"ツ\", \"テ\", \"ト\",\n        \"ナ\", \"ニ\", \"ヌ\", \"ネ\", \"ノ\",\n        \"ハ\", \"ヒ\", \"フ\", \"ヘ\", \"ホ\",\n        \"マ\", \"ミ\", \"ム\", \"メ\", \"モ\",\n        \"ヤ\", \"ユ\", \"ヨ\",\n        \"ラ\", \"リ\", \"ル\", \"レ\", \"ロ\",\n        \"ワ\", \"ヲ\", \"ン\"\n    ];\n\n    const katakanaDakuOnPhonetic = [\"ga\", \"gi\", \"gu\", \"ge\", \"go\",\n        \"za\", \"ji\", \"zu\", \"ze\", \"zo\",\n        \"da\", \"ji\", \"zu\", \"de\", \"do\",\n        \"ba\", \"bi\", \"bu\", \"be\", \"bo\",\n        \"pa\", \"pi\", \"pu\", \"pe\", \"po\"\n    ];\n    const katakanaDakuOn = [\"ガ\", \"ギ\", \"グ\", \"ゲ\", \"ゴ\",\n        \"ザ\", \"ジ\", \"ズ\", \"ゼ\", \"ゾ\",\n        \"ダ\", \"ヂ\", \"ヅ\", \"デ\", \"ド\",\n        \"バ\", \"ビ\", \"ブ\", \"ベ\", \"ボ\",\n        \"パ\", \"ピ\", \"プ\", \"ペ\", \"ポ\"\n    ];\n\n    const katakanaYoOnPhonetic = [\"kya\", \"kyu\", \"kyo\",\n        \"sha\", \"shu\", \"sho\",\n        \"cha\", \"chu\", \"cho\",\n        \"nya\", \"nyu\", \"nyo\",\n        \"hya\", \"hyu\", \"hyo\",\n        \"mya\", \"myu\", \"myo\",\n        \"rya\", \"ryu\", \"ryo\",\n        \"gya\", \"gyu\", \"gyo\",\n        \"ja\", \"ju\", \"jo\",\n        \"bya\", \"byu\", \"byo\",\n        \"pya\", \"pyu\", \"pyo\",\n    ];\n    const katakanaYoOn = [\"キャ\", \"キュ\", \"キョ\",\n        \"シャ\", \"シュ\", \"ショ\",\n        \"チャ\", \"チュ\", \"チョ\",\n        \"ニャ\", \"ニュ\", \"ニョ\",\n        \"ヒャ\", \"ヒュ\", \"ヒョ\",\n        \"ミャ\", \"ミュ\", \"ミョ\",\n        \"リャ\", \"リュ\", \"リョ\",\n        \"ギャ\", \"ギュ\", \"ギョ\",\n        \"ジャ\", \"ジュ\", \"ジョ\",\n        \"ビャ\", \"ビュ\", \"ビョ\",\n        \"ピャ\", \"ピュ\", \"ピョ\"\n    ];\n\n    const katakanaForeignPhonetic = [\"fa\", \"fi\", \"fe\", \"fo\", \"fyu\",\n        \"wi\", \"we\", \"wo\", \"va\", \"vi\", \"ve\", \"vo\",\n        \"tsa\", \"tsi\", \"tse\", \"tso\",\n        \"che\", \"she\", \"je\",\n        \"ti\", \"di\", \"du\", \"tu\"\n    ];\n    const katakanaForeign = [\"ファ\", \"フィ\", \"フェ\", \"フォ\", \"フュ\",\n        \"ウィ\", \"ウェ\", \"ウォ\", \"ヴァ\", \"ヴィ\", \"ヴェ\", \"ヴォ\",\n        \"ツァ\", \"ツィ\", \"ツェ\", \"ツォ\", \"チェ\", \"シェ\", \"ジェ\",\n        \"ティ\", \"ディ\", \"デュ\", \"トゥ\"\n    ];\n\n    zipAndAppendToDeck(katakanaForeign, katakanaForeignPhonetic, \"foreign katakana\", defaultDeck);\n    zipAndAppendToDeck(katakanaYoOn, katakanaYoOnPhonetic, \"contracted katakana\", defaultDeck);\n    zipAndAppendToDeck(katakanaDakuOn, katakanaDakuOnPhonetic, \"voiced katakana\", defaultDeck);\n    zipAndAppendToDeck(katakanaSeiOn, katakanaSeiOnPhonetic, \"basic katakana\", defaultDeck);\n    zipAndAppendToDeck(hiraganaYoOn, hiraganaYoOnPhoenetic, \"contracted hiragana\", defaultDeck);\n    zipAndAppendToDeck(hiraganaDakuOn, hiraganaDakuOnPhonetic, \"voiced hiragana\", defaultDeck);\n    zipAndAppendToDeck(hiraganaSeiOn, hiraganaSeiOnPhonetic, \"basic hiragana\", defaultDeck);\n\n    defaultDeck.rebuildActive(activeTags);\n    return defaultDeck;\n}","import React from 'react';\nimport { Result, Card } from 'antd';\n\nclass ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { hasError: false };\n    }\n  \n    componentDidCatch(error, info) {\n        this.setState({ hasError: true });\n    }\n  \n    render() {\n        if (this.state.hasError) {\n            return (\n                <Card>\n                    <Result status=\"warning\" title=\"Opps! Something went wrong. Please refresh.\"/>\n                </Card>\n            )\n        }\n        return this.props.children;\n    }\n  }\n\nexport default ErrorBoundary;","import React from 'react';\nimport { Button, Card, Input } from 'antd';\nimport ErrorBoundary from './ErrorBoundary';\nimport './FlashCardApp.css';\n\nconst inputFieldStyle = {\n  backgroundColor: \"transparent\",\n  fontSize: 20,\n  textAlign: \"center\"\n}\n\nclass FlashCardApp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInput = this.handleInput.bind(this);\n    this.reportCorrectness = this.reportCorrectness.bind(this);\n    this.showAnswer = this.showAnswer.bind(this);\n    this.resetInputAfterTyping = this.resetInput.bind(this, 500);\n    this.resetInputAfterReveal = this.resetInput.bind(this, 0, true);\n\n    this.defaultBackgroundColor = \"#FFFFFF\";\n\n    this.state = {\n      typed: \"\",\n      textColor: \"#000000\",\n      backgroundColor: this.defaultBackgroundColor,\n      border: \"1px solid\",\n      firstTimeTyping: true\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"keydown\", this.handleInput);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keydown\", this.handleInput);\n  }\n\n  handleInput(event) {\n    if (!this.props.answering)\n      return;\n\n    if (this.state.firstTimeTyping)\n      this.setState({ firstTimeTyping: false });\n\n    if (event.key === \"Enter\") {\n      if (this.state.justRevealed)\n        this.resetInputAfterReveal();\n      else\n        this.showAnswer();\n    }\n\n    let curText = this.state.typed;\n    let isCharacter = /^.$/;\n    if (event.key === \"Backspace\") {\n      if (curText.length > 0) {\n        this.setState({ typed: curText.slice(0, curText.length - 1) })\n      }\n      // should test for other allowable keys here (sentences have punctuation)\n    } else if (isCharacter.test(event.key)) {\n      this.setState((state) => state.typed += event.key)\n    } else {\n      // Do not extend timer for input or report correctness\n      return;\n    }\n\n    // Extend the timer to recognize input if it exists, otherwise make one\n    if (this.state.typingTimer)\n      clearTimeout(this.state.typingTimer);\n    this.setState({ typingTimer: setTimeout(this.reportCorrectness, 300) });\n  }\n\n  showAnswer(event) {\n    if (this.state.firstTimeTyping)\n      this.setState({ firstTimeTyping: false });\n\n    this.setState({ justRevealed: true, typed: this.props.currentCard.back })\n  }\n\n  reportCorrectness() {\n    /* Flashes red or green on the page depending on input correctness */\n    if (!this.props.answering)\n      return;\n\n    // Don't accept input if card got revealed\n    if (this.state.justRevealed || !this.props.currentCard.back)\n      return;\n\n    let currentCard = this.props.currentCard;\n    let answer = currentCard.back;\n    let typed = this.state.typed.toLowerCase();\n\n    // Don't report if the first few characters are correct\n    if (typed.length < answer.length) {\n      if (currentCard.startsWith(typed))\n        return;\n    }\n\n    if (currentCard.hasAnswer(typed)) {\n      this.setState({ backgroundColor: \"#f6ffed\", border: \"1px solid #b7eb8f\" });\n      this.resetInputAfterTyping(true);\n    } else {\n      this.setState({ backgroundColor: \"#fff1f0\", border: \"1px solid #ffa39e\" });\n      this.resetInputAfterTyping(false);\n    }\n  }\n\n  resetInput(delay, nextCard) {\n    /* Used to create partial functions via method.bind() for callback */\n    if (nextCard) {\n      this.setState({ typed: \"\" })\n      this.props.changeCard();\n    }\n    setTimeout(() => this.setState({ backgroundColor: this.defaultBackgroundColor, border: \"1px solid\" }), delay)\n    this.setState({ typed: \"\", typingTimer: null, justRevealed: false });\n  }\n\n  render() {\n    let card = this.props.currentCard;\n\n    let defaultText = this.state.firstTimeTyping ? \"type the phonetic translation\" : \"\";\n\n    let displayButton;\n    if (this.state.justRevealed)\n      displayButton = <Button type=\"default\" size=\"large\" onClick={this.resetInputAfterReveal}\n        style={{ backgroundColor: \"transparent\", margin: \"2%\" }}>continue</Button>;\n    else\n      displayButton = <Button type=\"default\" size=\"large\" onClick={this.showAnswer}\n        style={{ backgroundColor: \"transparent\", margin: \"2%\" }}>show</Button>\n\n    return (\n      <ErrorBoundary>\n        <div align=\"center\">\n          <Card className=\"Card\" style={{ backgroundColor: this.state.backgroundColor }}>\n            <div style={{ fontSize: 70, margin: \"2%\" }}>\n              {card.front}\n            </div>\n            <div align=\"center\" style={{ margin: \"2%\", width: \"80%\" }}>\n              <Input autoFocus ghost=\"true\"\n                placeholder={defaultText}\n                value={this.state.typed}\n                style={inputFieldStyle}\n                onChange={this.handleInput} />\n            </div>\n            <div>{displayButton}</div>\n          </Card>\n        </div>\n      </ErrorBoundary>\n    )\n  };\n}\n\nexport default FlashCardApp;\n","import React from 'react';\nimport { Table, Modal, Switch, message } from \"antd\";\nimport ErrorBoundary from './ErrorBoundary';\n\nclass TagsModal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClose = this.handleClose.bind(this);\n\n        // To determine whether changes were made (e.g. two toggles on same toggle is not a change)\n        this.tagsStartingStatuses = {}\n        this.tagsStatuses = {};\n\n        let savedSettings = JSON.parse(localStorage.getItem(\"activeTags\"));\n\n        // Populate values from local storage, if they exist.\n        this.props.listOfTags.forEach((tag) => {\n            let defaultToggle = savedSettings[tag] || false;\n            this.tagsStatuses[tag] = defaultToggle;\n            this.tagsStartingStatuses[tag] = defaultToggle;\n        });\n\n        this.columns = [\n            {\n                title: 'Tag',\n                dataIndex: 'tag',\n                key: 'tag',\n            },\n            {\n                title: 'Active',\n                dataIndex: 'active',\n                key: 'active',\n                render: (_, record) => {\n                    let handleSwitches = (checked) => {\n                        this.tagsStatuses[record.tag] = checked;\n                    }\n\n                    return <Switch defaultChecked={this.tagsStatuses[record.tag]}\n                        onChange={handleSwitches}>\n                    </Switch>;\n                }\n            }\n        ];\n    }\n\n    handleClose() {\n        // Determine if anything changed\n        let changed = false;\n        Object.entries(this.tagsStartingStatuses).forEach(([tag, startingStatus]) => {\n            if (this.tagsStatuses[tag] !== startingStatus) {\n                changed = true;\n                // Update the starting status for next deck change\n                this.tagsStartingStatuses[tag] = this.tagsStatuses[tag];\n            }\n        })\n\n        // Rebuild deck with active tags\n        if (changed) {\n            let activeTags = Object.keys(this.tagsStatuses).filter((tag) => {\n                return this.tagsStatuses[tag];\n            });\n            this.props.rebuildActive(activeTags);\n\n            // Record the changes in local storage via overwrite\n            localStorage.setItem(\"activeTags\", JSON.stringify(this.tagsStatuses));\n\n            this.props.changeCard();\n            message.success(\"Deck rebuilt!\");\n        }\n\n        this.props.closeModal();\n    }\n\n    render() {\n        // Make for ALL tags.\n        let dataSource = this.props.listOfTags.map((tag, i) => {\n            return { key: i, tag: tag }\n        });\n\n        return (\n            <ErrorBoundary>\n                <Modal title=\"Active Categories\"\n                    visible={this.props.visible}\n                    onCancel={this.handleClose}\n                    cancelButtonProps={{ disabled: true }}\n                    onOk={this.handleClose}>\n                    <Table columns={this.columns} dataSource={dataSource}></Table>\n                </Modal>\n            </ErrorBoundary>\n        );\n    }\n}\n\nexport default TagsModal;","import React from \"react\"\nimport { Tag, Input, Tooltip, Icon } from 'antd';\n\nexport default class EditableTagGroup extends React.Component {\n  \n  // Component in addition to changing state,\n  // also calls callback to set tags in parent components/card\n  state = {\n    tags: this.props.tags,\n    inputVisible: false,\n    inputValue: '',\n  };\n\n  handleClose = removedTag => {\n    const tags = this.props.tags.filter(tag => tag !== removedTag);\n    this.setState({ tags });\n    this.props.setTags(tags);\n  };\n\n  showInput = () => {\n    this.setState({ inputVisible: true }, () => this.input.focus());\n  };\n\n  handleInputChange = e => {\n    this.setState({ inputValue: e.target.value });\n  };\n\n  handleInputConfirm = () => {\n    const { inputValue } = this.state;\n    let { tags } = this.state;\n    if (inputValue && tags.indexOf(inputValue) === -1) {\n      tags = [...tags, inputValue];\n    }\n\n    this.props.setTags(tags);\n\n    this.setState({\n      tags,\n      inputVisible: false,\n      inputValue: '',\n    });\n  };\n\n  saveInputRef = input => (this.input = input);\n\n  render() {\n    const { inputVisible, inputValue } = this.state;\n    const { tags } = this.state;\n    let tagDisplay;\n\n    if (tags) {\n        tagDisplay = tags.map((tag, index) => {\n          const isLongTag = tag.length > 20;\n          const tagElem = (\n            <Tag key={tag} closable onClose={() => this.handleClose(tag)}>\n              {isLongTag ? `${tag.slice(0, 20)}...` : tag}\n            </Tag>\n          );\n          return isLongTag ? (\n            <Tooltip title={tag} key={tag}>\n              {tagElem}\n            </Tooltip>\n          ) : (\n            tagElem\n          );\n        })\n    }\n\n    return (\n      <div>\n        {tagDisplay}\n        {/* Use AutoComplete */}\n        {inputVisible && (\n          <Input\n            ref={this.saveInputRef}\n            type=\"text\"\n            size=\"small\"\n            style={{ width: 78 }}\n            value={inputValue}\n            onChange={this.handleInputChange}\n            onBlur={this.handleInputConfirm}\n            onPressEnter={this.handleInputConfirm}\n          />\n        )}\n        {!inputVisible && (\n          <Tag onClick={this.showInput} style={{ background: '#fff', borderStyle: 'dashed' }}>\n            <Icon type=\"plus\" /> New Tag\n          </Tag>\n        )}\n      </div>\n    );\n  }\n}","import React from 'react';\nimport { Form, Input, message, Popconfirm, Table, Tag } from 'antd';\nimport { Card, Divider, Button, Icon } from 'antd';\nimport EditableTagGroup from \"./EditableTagGroup\";\nimport { FlashCard } from \"./Deck\";\nimport Highlighter from 'react-highlight-words';\nimport ErrorBoundary from './ErrorBoundary';\n\nconst { Search } = Input;\n\nconst EditableContext = React.createContext();\n\nclass EditableCell extends React.Component {\n    constructor(props) {\n        super(props);\n        this.renderCell = this.renderCell.bind(this);\n    }\n\n    renderCell({ getFieldDecorator }) {\n        const { editing, dataIndex, title, inputType,\n            record, index, children, ...restProps } = this.props;\n\n        let cellToRender;\n\n        if (editing) {\n            cellToRender = <Form.Item style={{margin: 0}}>\n                                {getFieldDecorator(dataIndex, {initialValue: record[dataIndex]})(<Input/>)}\n                            </Form.Item>\n        } else {\n            cellToRender = children;\n        }\n\n        return (\n            <td {...restProps}>\n                {cellToRender}\n            </td>\n        );\n    }\n\n    render() {\n        return <EditableContext.Consumer>{this.renderCell}</EditableContext.Consumer>;\n    }\n}\n\nclass EditableTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleTableChange = this.handleTableChange.bind(this);\n        this.isEditing = this.isEditing.bind(this);\n        this.edit = this.edit.bind(this);\n        this.cancel = this.cancel.bind(this);\n        this.save = this.save.bind(this);\n\n        this.state = {\n            searchInput: \"\",\n            editingKey: \"\",\n            currentPage: 1,\n            refresh: false,\n            rowTags: [],\n            sortedInfo: null\n        };\n\n        const renderHighlighter = (text) => {\n            return <Highlighter \n                highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n                searchWords={[this.state.searchInput]}\n                autoEscape\n                textToHighlight={text.toString()}/>\n        }\n\n        this.columns = [\n            {\n                title: \"Front\",\n                dataIndex: \"front\",\n                key: \"front\",\n                width: \"15%\",\n                editable: true,\n                sorter: (a, b) => a.front.localeCompare(b.front),\n                render: renderHighlighter\n            },\n            {\n                title: \"Back\",\n                dataIndex: \"back\",\n                key: \"back\",\n                width: \"15%\",\n                editable: true,\n                sorter: (a, b) => a.back.localeCompare(b.back),\n                render: renderHighlighter\n            },\n            {\n                title: \"Tags\",\n                dataIndex: \"tags\",\n                key: \"tags\",\n                width: \"40%\",\n                filters: this.props.deckOps.listOfTags.map((tag) => { return {text: tag, value: tag} }),\n                onFilter: (value, record) => { return record.isTagged(value) || record.isNewCard },\n                render: (text, record, dataIndex) => {\n                    const editable = this.isEditing(record);\n\n                    if (editable) {\n                        return <EditableTagGroup tags={this.state.rowTags} \n                                    setTags={ (rowTags) => { this.setState({ rowTags }) } }/>\n                    } else {\n                        if (record.tags)\n                            return record.tags.map((tag, i) => <Tag key={i}>{tag}</Tag>);\n                        else\n                            return;\n                    }\n                }\n            },\n            {\n                title: \"Operations\",\n                dataIndex: \"operations\",\n                key: \"operations\",\n                render: (text, record) => {\n                    const { editingKey } = this.state;\n                    const editable = this.isEditing(record);\n                    let operationLink;\n\n                    if (editable) {\n                        operationLink = (\n                            <span>\n                                <EditableContext.Consumer>\n                                    {\n                                        (form) => {\n                                            return <Button size=\"small\" type=\"link\"\n                                                    onClick={() => { this.save(form, record.key) }}>\n                                                    Save\n                                                </Button>\n                                        }\n                                    }\n                                </EditableContext.Consumer>\n                                <Divider type=\"vertical\" />\n                                <Popconfirm title=\"OK to cancel?\"\n                                    onConfirm={() => { this.cancel(record.key) }}>\n                                    <Button size=\"small\" type=\"link\">Cancel</Button>\n                                </Popconfirm>\n                            </span>\n                        )\n                    } else {\n                        operationLink = (\n                            <span>\n                                <Button disabled={editingKey !== ''} size=\"small\" type=\"link\"\n                                    onClick={() => { this.edit(record.key) }}>\n                                    Edit\n                                </Button>\n                                <Divider type=\"vertical\" />\n                                <Popconfirm title=\"Delete this card?\" okType=\"primary\" okText=\"Delete\"\n                                    onConfirm={() => { this.props.deckOps.deleteCard(record.key); \n                                                        message.success(\"Deleted card!\"); }}>\n                                    <Button size=\"small\" type=\"link\">Delete</Button>\n                                </Popconfirm>\n                            </span>\n                        )\n                    }\n\n                    return operationLink;\n                }\n            }\n        ];\n    }\n\n    handleTableChange(pagination, filters, sorter) {\n        this.setState({ sortedInfo: sorter, currentPage: pagination.current });\n    }\n\n    makeNewRow = () => {\n        const newCard = new FlashCard(\"\", \"\");\n        // To help keep fields up top even if filters are on.\n        // Property goes away after editCard, since it create a new FlashCard.\n        newCard.isNewCard = true;\n        this.props.deckOps.appendCard(newCard);\n\n        this.setState({\n            // Resets sorting and pagination to avoid form not shown.\n            // Does not reset search filter to go back to search after addition of new card.\n            sortedInfo: null,\n            currentPage: 1,\n            rowTags: [],\n            creatingNewCard: true,\n            editingKey: newCard.key\n        });\n    }\n\n    isEditing(record) {\n        return record.key === this.state.editingKey;\n    }\n\n    edit(key) {\n        // Pull existing tags for editing\n        const rowTags = this.props.deckOps.getCardFromKey(key).tags || [];\n        this.setState({ editingKey: key, rowTags });\n    }\n\n    cancel() {\n        if (this.state.creatingNewCard) {\n            const { editingKey } = this.state;\n            this.setState({ creatingNewCard: false });\n            this.props.deckOps.deleteCard(editingKey);\n        }\n        this.setState({ editingKey: '' });\n    }\n\n    save(form, key) {\n        form.validateFields((err, values) => {\n            if (err) return;\n\n            if (!values.front && !values.back) {\n                message.warning(\"Cannot add empty card!\");\n                return;\n            }\n\n            if (!values.front) {\n                message.warning(\"Card needs a front!\");\n                return;\n            }\n\n            if (!values.back) {\n                message.warning(\"Card needs a back!\");\n                return;\n            }\n\n            values.tags = this.state.rowTags;\n            this.props.deckOps.editCard(key, values);\n\n            if (this.state.creatingNewCard)\n                message.success(\"Created card!\");\n            else\n                message.success(\"Edited card!\");\n\n            this.setState({ editingKey: '', creatingNewCard: false, rowTags: [] });\n        });\n    }\n\n    render() {\n        const renderTableHeader = () => {\n            const handleSearchChange = (event) => {\n                const { value } = event.target;\n                this.setState({ searchInput: value });\n            };\n            return (\n                <span style={{ display: \"inline-flex\", width: \"100%\", justifyContent: \"flex-end\" }}>\n                    <Search placeholder=\"Search\"\n                        style={{ marginRight: \"2%\" }}\n                        onChange={handleSearchChange} />\n                    <Button onClick={this.makeNewRow} disabled={this.state.editingKey !== ''}>\n                        <Icon type=\"plus\" />\n                        New Card\n                    </Button>\n                </span>\n            );\n        }\n\n        const components = { body: { cell: EditableCell } };\n        let { sortedInfo } = this.state;\n        sortedInfo = sortedInfo || {};\n\n        const columns = this.columns.map((col) => {\n            if (!col.editable)\n                return col;\n\n            return {\n                ...col,\n                sortOrder: sortedInfo.columnKey === col.key && sortedInfo.order,\n                onCell: (record) => {\n                    return {\n                        record,\n                        dataIndex: col.dataIndex,\n                        title: col.title,\n                        editing: this.isEditing(record)\n                    }\n                }\n            }\n        });\n\n        let data = this.props.dataSource;\n        if (!this.state.creatingNewCard) {\n            data = data.filter((item) => item.includes(this.state.searchInput));\n        }\n\n        return <EditableContext.Provider value={this.props.form}>\n            <Table components={components}\n                onChange={this.handleTableChange}\n                dataSource={data}\n                columns={columns}\n                pagination={{ onChange: this.cancel, current: this.state.currentPage }} \n                title={renderTableHeader}\n                bordered />\n        </EditableContext.Provider>\n    }\n}\n\nconst EditableFormTable = Form.create({ name: \"Editable Form Table\" })(EditableTable);\n\nclass ManageDeckPage extends React.Component {\n    // Data lives here to refresh table component upon change\n    state = {\n        listOfCards: this.props.deckOps.getListOfCards()\n    };\n\n    get deckOps() {\n        const appendCard = (...args) => {\n            this.props.deckOps.appendCard(...args);\n            // Can't use getter through props (evaluates in parent) so must explicitly call this function.\n            // Used to refresh table upon change.\n            this.setState({ listOfCards: this.props.deckOps.getListOfCards() });\n        }\n    \n        const deleteCard = (...args) => {\n            this.props.deckOps.deleteCard(...args);\n            this.setState({ listOfCards: this.props.deckOps.getListOfCards() });\n        };\n    \n        const editCard = (...args) => {\n            this.props.deckOps.editCard(...args);\n            this.setState({ listOfCards: this.props.deckOps.getListOfCards() });\n        }\n        return {\n            ...this.props.deckOps,\n            appendCard,\n            deleteCard,\n            editCard\n        }\n    }\n\n    render() {\n        return (\n            <ErrorBoundary>\n                <Card style={{margin: \"2% 5% 2% 5%\"}}>\n                    <EditableFormTable dataSource={this.state.listOfCards} deckOps={this.deckOps} />\n                </Card>\n            </ErrorBoundary>\n        )\n    }\n}\n\nexport default ManageDeckPage;","import React from 'react';\nimport { buildDefaultDeck, Deck } from './Deck';\nimport { Icon, Menu, Layout, message } from \"antd\";\nimport FlashCardApp from './FlashCardApp';\nimport TagsModal from './TagsModal';\nimport ManageDeckPage from './ManageDeckPage';\nimport ErrorBoundary from './ErrorBoundary';\nimport \"./Site.css\";\n\nconst { Content } = Layout;\n\nclass Site extends React.Component {\n    constructor(props) {\n        super(props);\n        this.selectMenuItem = this.selectMenuItem.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n        this.changeCard = this.changeCard.bind(this);\n\n        const startingActive = [];\n\n        // Load existing values if they're there.\n        let savedSettings = JSON.parse(localStorage.getItem(\"activeTags\"));\n\n        if (savedSettings) {\n            Object.entries(savedSettings).forEach(([tag, active]) => {\n                if (active)\n                    startingActive.push(tag);\n            });\n        } else {\n            // Otherwise, default to having basic hiragana\n            startingActive.push(\"basic hiragana\");\n            savedSettings = { \"basic hiragana\": true };\n            localStorage.setItem(\"activeTags\", JSON.stringify(savedSettings));\n            message.success(\"Loaded default settings!\");\n        }\n\n        let savedDeckJSON = localStorage.getItem(\"savedDeck\");\n        this.deck = savedDeckJSON ? Deck.buildFromJSON(savedDeckJSON) : buildDefaultDeck(startingActive);\n        // Since we do not serialize deck into savedDeck in TagsModal, we need to pull settings and rebuild.\n        this.deck.rebuildActive(startingActive);\n\n        this.state = {\n            currentCard: this.deck.getNextCard(),\n            menuOpen: false,\n            prevSelected: \"review\",\n            selected: \"review\"\n        };\n        this.manageDeckChanged = false;\n    }\n\n    closeModal() {\n        this.setState({ selected: this.state.prevSelected });\n    }\n\n    selectMenuItem(event) {\n        // Navigation away from ManageDeckPage should rebuild the deck to accomodate changes.\n        if (this.state.selected === \"manage\" && this.manageDeckChanged) {\n            this.deck.rebuildActive();\n            this.setState({ currentCard: this.deck.getNextCard() });\n            this.manageDeckChanged = false;\n        }\n\n        this.setState({ selected: event.key, prevSelected: this.state.selected })\n    }\n\n    changeCard() {\n        this.setState({ currentCard: this.deck.getNextCard() });\n    }\n\n    get deckOps() {\n        const appendCard = (...args) => {\n            this.deck.appendCard(...args);\n            this.manageDeckChanged = true;\n            localStorage.setItem(\"savedDeck\", JSON.stringify(this.deck));\n        };\n        const editCard = (...args) => {\n            this.deck.editCard(...args);\n            this.manageDeckChanged = true;\n            localStorage.setItem(\"savedDeck\", JSON.stringify(this.deck));\n        };\n        const deleteCard = (...args) => {\n            this.deck.deleteCard(...args);\n            this.manageDeckChanged = true;\n            localStorage.setItem(\"savedDeck\", JSON.stringify(this.deck));\n        };\n\n        return {\n            listOfTags: this.deck.listOfTags,\n            getCardFromKey: this.deck.getCardFromKey,\n            getListOfCards: this.deck.getListOfCards,\n            appendCard,\n            editCard,\n            deleteCard\n        }\n    }\n\n    render() {\n        const navBar = <Menu mode=\"horizontal\" style={{ height: \"5%\" }}\n                            onClick={this.selectMenuItem}\n                            selectedKeys={[this.state.selected]}>\n                            <Menu.Item key=\"review\"><Icon type=\"home\"></Icon>Review</Menu.Item>\n                            <Menu.Item key=\"manage\"><Icon type=\"edit\"></Icon>Manage Deck</Menu.Item>\n                            <Menu.Item key=\"stats\" disabled><Icon type=\"line-chart\"></Icon>Stats</Menu.Item>\n                            \n                            <Menu.Item key=\"login\" style={ {float: \"right\"} } disabled>\n                                <Icon type=\"login\"></Icon>\n                                Log In\n                            </Menu.Item>\n                            <Menu.Item key=\"tags\" style={ {float: \"right\"} }>\n                                <Icon type=\"setting\"></Icon>\n                                Active Tags\n                            </Menu.Item>\n                        </Menu>\n\n        let modal;\n        switch (this.state.selected) {\n            case \"tags\":\n                modal = <TagsModal\n                            listOfTags={this.deck.listOfTags}\n                            closeModal={this.closeModal}\n                            rebuildActive={(activeTags) => { this.deck.rebuildActive(activeTags) }}\n                            changeCard={this.changeCard}\n                            visible={this.state.selected === \"tags\"}>\n                        </TagsModal>\n                break;\n            case \"manage\":\n                this.activeMain = <ManageDeckPage visible={this.state.selected === \"manage\"} \n                                    deckOps={this.deckOps}/>\n                break;\n            case \"review\":\n                this.activeMain = <div>\n                                    <div style={{ marginTop: \"1%\" }}>\n                                        <header> Flash Cards for Japanese </header>\n                                    </div>\n                                    <FlashCardApp currentCard={this.state.currentCard}\n                                        changeCard={this.changeCard}\n                                        answering={this.state.selected === \"review\"}>\n                                    </FlashCardApp>\n                                </div>\n                break;\n            default:\n                break;\n        }\n\n        return (\n            <Layout>\n                {navBar}\n                    <ErrorBoundary>\n                    {modal}\n                    <Content>\n                    {this.activeMain}\n                    </Content>\n                </ErrorBoundary>\n            </Layout>\n        )\n    }\n}\n\nexport default Site;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Site from './Site';\nimport * as serviceWorker from './serviceWorker';\nimport ErrorBoundary from './ErrorBoundary'\n\nReactDOM.render(<ErrorBoundary><Site /></ErrorBoundary>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}